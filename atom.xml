<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kenve&#39;s Blog</title>
  <subtitle>世界和平(.)</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="//kenve.github.io/"/>
  <updated>2017-08-24T16:04:32.716Z</updated>
  <id>//kenve.github.io/</id>
  
  <author>
    <name>Kenve</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javascript之this理解</title>
    <link href="//kenve.github.io/2017/08/19/javascript-this/"/>
    <id>//kenve.github.io/2017/08/19/javascript-this/</id>
    <published>2017-08-18T16:00:00.000Z</published>
    <updated>2017-08-24T16:04:32.716Z</updated>
    
    <content type="html"><![CDATA[<p>this作为JavaScript的关键字之一，与其他语言相比表现略有不同，并且，在<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode" target="_blank" rel="external">严格模式</a>和非严格模式下表现也有差别。<br><a id="more"></a></p>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul>
<li>函数的调用方式决定了this的值，随着函数调用方式（使用场合）的不同，this的值也会发生变化。但总的来说谁调用指向谁。</li>
<li>this不能在执行期间被赋值。</li>
<li>在每次函数，被调用时this的值也有可能变化。</li>
<li>ES5中引入了<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank" rel="external">bind</a>方法用于设置函数的this值,无论这个函数是如何被调用的。</li>
<li>ES6新增了this词法解析的箭头函数（它在闭合的执行上下文内设置this的值）。<br>语法</li>
</ul>
<h2 id="在不同环境下，this的不同用法。"><a href="#在不同环境下，this的不同用法。" class="headerlink" title="在不同环境下，this的不同用法。"></a>在不同环境下，this的不同用法。</h2><h3 id="全局上下文"><a href="#全局上下文" class="headerlink" title="全局上下文"></a>全局上下文</h3><p>在全局运行上下文中（在任何函数体外）调用，this就指向全局对象Global(global/window)。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在浏览器的执行环境中，this指向全局对象即 window 对象</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>);   <span class="comment">//true </span></div><div class="line"></div><div class="line"><span class="keyword">this</span>.a =<span class="string">'hello'</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a); <span class="comment">//'hello'</span></div><div class="line"><span class="built_in">console</span>.log(a) <span class="comment">//'hello'</span></div></pre></td></tr></table></figure></p>
<h3 id="函数上下文"><a href="#函数上下文" class="headerlink" title="函数上下文"></a>函数上下文</h3><p>在函数内部，this的值取决于函数是如何被调用的。</p>
<h4 id="直接调用"><a href="#直接调用" class="headerlink" title="直接调用"></a>直接调用</h4><p>在非严格模式下，且this值未被call设置，这时this的值默认为全局对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">test()===<span class="built_in">window</span>; <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> b = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　<span class="keyword">this</span>.b = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">test1();</div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">//0</span></div></pre></td></tr></table></figure></p>
<p>在严格模式下，如果this未被执行的上下文环境定义（this将保持他进入执行环境时的值），那么它将会默认为undefined。<br>如下：由于test2()是直接被调用的，而不是作为对象的属性/方法调用的（比如 window.f2()），所以this的值是undefined。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="meta">    "use strict"</span>; <span class="comment">//严格模式</span></div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line">test2() ===<span class="literal">undefined</span>; <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<h4 id="对象方法中的this"><a href="#对象方法中的this" class="headerlink" title="对象方法中的this"></a>对象方法中的this</h4><p>函数作为某个对象的方法调用时，这时this就指这个上级对象（调用该函数的对象）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  <span class="attr">prop</span>: <span class="number">22</span>,</div><div class="line">  <span class="attr">f</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.prop;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//调用obj.f()时，函数内的this将绑定到o对象。</span></div><div class="line"><span class="built_in">console</span>.log(obj.f()); <span class="comment">// 22</span></div></pre></td></tr></table></figure>
<p>this的值只与函数 f 作为 o 的成员被调用有关系,在何处或者如何定义调用函数完全不会影响到this的行为。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> obj = &#123;<span class="attr">prop</span>: <span class="number">22</span>&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">independent</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.prop;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 后定义</span></div><div class="line">obj.f = independent;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(obj.f()); <span class="comment">// 22</span></div></pre></td></tr></table></figure></p>
<p>类似的，this 的绑定只受最靠近的成员引用的影响。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">o.b = &#123;</div><div class="line">  <span class="attr">g</span>: independent,</div><div class="line">  <span class="attr">prop</span>: <span class="number">22</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">// g的上一级时b</span></div><div class="line"><span class="built_in">console</span>.log(o.b.g()); <span class="comment">// 22</span></div></pre></td></tr></table></figure></p>
<h4 id="原型链中的this"><a href="#原型链中的this" class="headerlink" title="原型链中的this"></a>原型链中的this</h4><p>相同的概念在定义在原型链中的方法也是一致的。如果该方法存在于一个对象的原型链上，那么this指向的是调用这个方法的对象，表现得好像是这个方法就存在于这个对象上一样。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义o对象 包含f匿名函数，作用时返回a b和</span></div><div class="line"><span class="keyword">var</span> o = &#123;</div><div class="line">  <span class="attr">f</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="keyword">this</span>.b; </div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//  p 继承 o, 使用o的原型对象及其属性去创建一个新的对象p</span></div><div class="line"><span class="keyword">var</span> p = <span class="built_in">Object</span>.create(o);</div><div class="line">p.a = <span class="number">1</span>;</div><div class="line">p.b = <span class="number">4</span>;</div><div class="line"></div><div class="line"><span class="comment">// p调用f</span></div><div class="line"><span class="built_in">console</span>.log(p.f()); <span class="comment">// 5</span></div></pre></td></tr></table></figure>
<p>上例子中，对象p没有属于它自己的f属性，它的f属性继承自它的原型。但是这对于最终在o中找到f属性的查找过程来说没有关系；查找过程首先从p.f的引用开始，所以函数中的this指向p。也就是说，因为f是作为p的方法调用的，所以它的this指向了p。这是JavaScript的原型继承中的一个有趣的特性。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="external">Object.create()</a></p>
<h4 id="getter-与-setter-中的-this"><a href="#getter-与-setter-中的-this" class="headerlink" title="getter 与 setter 中的 this"></a>getter 与 setter 中的 this</h4><p>谁调用指向谁的概念也适用于函数作为getter、setter调用，作为getter或setter函数都会绑定 this 到从设置属性或得到属性的那个对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">modulus</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(<span class="keyword">this</span>.re * <span class="keyword">this</span>.re + <span class="keyword">this</span>.im * <span class="keyword">this</span>.im);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> o = &#123;</div><div class="line">  <span class="attr">re</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">im</span>: <span class="number">-1</span>,</div><div class="line">  get phase()&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.atan2(<span class="keyword">this</span>.im, <span class="keyword">this</span>.re);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//对象o上定义一个新属性modulus</span></div><div class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">'modulus'</span>, &#123;</div><div class="line">  <span class="attr">get</span>: modulus, <span class="attr">enumerable</span>:<span class="literal">true</span>, <span class="attr">configurable</span>:<span class="literal">true</span>&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(o.phase, o.modulus); <span class="comment">// -0.78 , 1.4142</span></div></pre></td></tr></table></figure></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="external">Object.defineProperty</a></p>
<h4 id="构造函数中的-this"><a href="#构造函数中的-this" class="headerlink" title="构造函数中的 this"></a>构造函数中的 this</h4><p>所谓构造函数，就是通过这个函数生成一个新对象(使用new关键字),它的this与即将被创建的新对象绑定（this就指这个新对象）。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * 构造函数的工作方式如下：</div><div class="line"> *</div><div class="line"> * function MyConstructor()&#123;</div><div class="line"> *   // 真正函数体的代码从这里开始.  </div><div class="line"> *   // 在 this 上创建属性，</div><div class="line"> *   // 根据需要分配给他们.  例如,</div><div class="line"> *   this.fum = "nom";</div><div class="line"> *   // 等等...</div><div class="line"> *</div><div class="line"> *   // 如果函数有一个返回语句</div><div class="line"> *   // 返回一个对象, 这个对象将是</div><div class="line"> *   // new 结果的表达式.  除此之外,</div><div class="line"> *   // 表达式的结果是对象</div><div class="line"> *   // 当前对象绑定到 this</div><div class="line"> *   // (即通常看到的通常情况).</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"></div><div class="line">　<span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     <span class="comment">//this不是全局对象,对外部无影响</span></div><div class="line">　　　<span class="keyword">this</span>.x = <span class="number">1</span>;</div><div class="line">　&#125;</div><div class="line">　<span class="keyword">var</span> o = <span class="keyword">new</span> test();</div><div class="line">　alert(o.x); <span class="comment">// 1</span></div><div class="line">  </div><div class="line">  <span class="comment">// 不改变全局</span></div><div class="line">　<span class="keyword">var</span> x = <span class="number">2</span>;</div><div class="line">　<span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　<span class="keyword">this</span>.x = <span class="number">1</span>;</div><div class="line">　&#125;</div><div class="line">　 o = <span class="keyword">new</span> test1();</div><div class="line">　alert(x); <span class="comment">//2</span></div><div class="line"></div><div class="line">  <span class="comment">//手动的设置了返回对象，与this绑定的默认对象被取消</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test3</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.x = <span class="number">1</span>;</div><div class="line">  <span class="keyword">return</span> &#123;<span class="attr">x</span>:<span class="number">3</span>&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">o = <span class="keyword">new</span> test3();</div><div class="line"><span class="built_in">console</span>.log(o.x); <span class="comment">//  3</span></div></pre></td></tr></table></figure></p>
<h4 id="call-和-apply"><a href="#call-和-apply" class="headerlink" title="call 和 apply"></a>call 和 apply</h4><p>当一个函数的函数体中使用了this关键字时，通过所有函数都从Function对象的原型中继承的call()方法和apply()方法调用时，它的值可以绑定到一个指定的对象上。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">c, d</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="keyword">this</span>.b + c + d;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> o = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">3</span>&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 第一个参数是用作“this”的对象，后续参数作为参数传递给函数调用</span></div><div class="line">add.call(o, <span class="number">5</span>, <span class="number">7</span>); <span class="comment">// 1 + 3 + 5 + 7 = 16</span></div><div class="line"></div><div class="line"><span class="comment">// 第一个参数是用作“this”的对象，第二个参数是一个数组，其成员用作函数调用中的参数</span></div><div class="line">add.apply(o, [<span class="number">10</span>, <span class="number">20</span>]); <span class="comment">// 1 + 3 + 10 + 20 = 34</span></div></pre></td></tr></table></figure></p>
<p>注意：如果传递的 this 值不是一个对象，JavaScript 将会尝试使用内部 ToObject（使用相关构造函数） 操作将其转换为对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">this</span>));</div><div class="line">&#125;</div><div class="line"><span class="comment">//通过new Number(7)转换为对象</span></div><div class="line">bar.call(<span class="number">7</span>); <span class="comment">// [object Number]</span></div></pre></td></tr></table></figure>
<h4 id="bind-方法"><a href="#bind-方法" class="headerlink" title="bind 方法"></a>bind 方法</h4><p>ES5中引入了 <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/bind" target="_blank" rel="external">Function.prototype.bind</a>,调用f.bind(someObject)会创建一个与f具有相同函数体和作用域的函数，但是在这个新函数中，this将永久地被绑定到了bind的第一个参数，无论这个函数是如何被调用的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> g = f.bind(&#123;<span class="attr">a</span>:<span class="string">"azerty"</span>&#125;);</div><div class="line"><span class="built_in">console</span>.log(g()); <span class="comment">// azerty</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> o = &#123;<span class="attr">a</span>:<span class="number">37</span>, <span class="attr">f</span>:f, <span class="attr">g</span>:g&#125;;</div><div class="line"><span class="built_in">console</span>.log(o.f(), o.g()); <span class="comment">// 37, azerty</span></div></pre></td></tr></table></figure></p>
<h3 id="DOM事件处理函数中的-this"><a href="#DOM事件处理函数中的-this" class="headerlink" title="DOM事件处理函数中的 this"></a>DOM事件处理函数中的 this</h3><p>当函数被用作事件处理函数时，它的this指向触发事件的元素（一些浏览器在使用非addEventListener的函数动态添加监听函数时不遵守这个约定）。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 被调用时，将关联的元素变成蓝色</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bluify</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span> === e.currentTarget); <span class="comment">// 总是 true</span></div><div class="line"></div><div class="line">  <span class="comment">// 当 currentTarget 和 target 是同一个对象是为 true</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span> === e.target);        </div><div class="line">  <span class="keyword">this</span>.style.backgroundColor = <span class="string">'#A5D9F3'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 获取文档中的所有元素的列表</span></div><div class="line"><span class="keyword">var</span> elements = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'*'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 将bluify作为元素的点击监听函数，当元素被点击时，就会变成蓝色</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span> ; i&lt;elements.length ; i++)&#123;</div><div class="line">  elements[i].addEventListener(<span class="string">'click'</span>, bluify, <span class="literal">false</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="内联事件处理函数中的-this"><a href="#内联事件处理函数中的-this" class="headerlink" title="内联事件处理函数中的 this"></a>内联事件处理函数中的 this</h3><p>当代码被内联处理函数调用时，它的this指向监听器所在的DOM元素：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"alert(this.tagName.toLowerCase());"</span>&gt;</span></div><div class="line">  Show this</div><div class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上面的alert会显示button。注意只有外层代码中的this是这样设置的：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"alert((function()&#123;return this&#125;)());"</span>&gt;</span></div><div class="line">  Show inner this</div><div class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在这种情况下，没有设置内部函数的 this，所以它指向 global/window 对象（即非严格模式下调用的函数未设置 this 时指向的默认对象）。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">onclick</span>=<span class="string">"alert(this);"</span>&gt;</span></div><div class="line">  Show this</div><div class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 弹出 url+# 并跳转--&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">onclick</span>=<span class="string">"alert(this);"</span>&gt;</span></div><div class="line">  Show this</div><div class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 弹出  javascript:;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com"</span> <span class="attr">onclick</span>=<span class="string">"alert(this);"</span>&gt;</span></div><div class="line">  Show this</div><div class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 弹出 https://www.baidu.com 并跳转--&gt;</span></div></pre></td></tr></table></figure>
<p>使用a标签时弹出 href 的值，即this 为href的值。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;this作为JavaScript的关键字之一，与其他语言相比表现略有不同，并且，在&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;严格模式&lt;/a&gt;和非严格模式下表现也有差别。&lt;br&gt;
    
    </summary>
    
      <category term="Web" scheme="//kenve.github.io/categories/Web/"/>
    
    
      <category term="javascript" scheme="//kenve.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Tests</title>
    <link href="//kenve.github.io/2017/04/26/hello-world/"/>
    <id>//kenve.github.io/2017/04/26/hello-world/</id>
    <published>2017-04-25T16:00:00.000Z</published>
    <updated>2017-05-07T09:23:45.532Z</updated>
    
    <content type="html"><![CDATA[<p>hello my blog!<br>changed to the new theme</p>
<a id="more"></a>
<p>more</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello my blog!&lt;br&gt;changed to the new theme&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="//kenve.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>移动端自适应解决方案</title>
    <link href="//kenve.github.io/2017/01/21/mobile-responsive-solution/"/>
    <id>//kenve.github.io/2017/01/21/mobile-responsive-solution/</id>
    <published>2017-01-20T16:00:00.000Z</published>
    <updated>2017-04-26T17:11:11.950Z</updated>
    
    <content type="html"><![CDATA[<h2 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h2><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><blockquote>
<p>REM是相对单位，是相对HTML根元素。</p>
</blockquote>
<h4 id="rem兼容性："><a href="#rem兼容性：" class="headerlink" title="rem兼容性："></a>rem兼容性：</h4><ul>
<li>ios：6.1系统以上都支持</li>
<li>android：2.1系统以上都支持</li>
<li>IE8+</li>
</ul>
<h4 id="rem基准值计算"><a href="#rem基准值计算" class="headerlink" title="rem基准值计算"></a>rem基准值计算</h4><ol>
<li>固定值：设置的基准值为<code>1rem = 100px</code>，当在写移动端布局的单位时，直接将设计稿的数值除以100在加上rem的单位就可以了。</li>
<li>动态设置：根据屏幕，，动态设置html的<code>font-size</code></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设置页面html元素的font-size值</span></div><div class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">win</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> doc = win.document,</div><div class="line">        docEle = doc.documentElement,</div><div class="line">        num = <span class="number">10</span>,</div><div class="line">        changeScreenSize = <span class="string">"orientationchange"</span> <span class="keyword">in</span> win ? <span class="string">"orientationchange"</span> : <span class="string">"resize"</span>,</div><div class="line">        setFontSize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> clientWidth = docEle.clientWidth;</div><div class="line">            docEle.style.fontSize = clientWidth / num + <span class="string">"px"</span></div><div class="line">        &#125;;</div><div class="line">    doc.addEventListener &amp;&amp; (win.addEventListener(changeScreenSize, setFontSize, <span class="literal">false</span>), doc.addEventListener(<span class="string">"DOMContentLoaded"</span>, setFontSize, <span class="literal">false</span>))</div><div class="line">&#125;(<span class="built_in">window</span>);</div></pre></td></tr></table></figure>
<h2 id="DPR"><a href="#DPR" class="headerlink" title="DPR"></a>DPR</h2><p>众所周知移动设备，高清方案就是根据设备屏幕有DPR（device pixel ratio，设备像素比，又称DPPX，比如dpr=2时，表示1个CSS像素由4个物理像素点组成）的，dpr比较大，所以显示的像素较为清晰。</p>
<h2 id="viewport"><a href="#viewport" class="headerlink" title="viewport"></a>viewport</h2><p>根据设备屏幕的DPR,自动设置viewport进行缩放,。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//通过添加meta元素，进行缩放设置</span></div><div class="line"><span class="keyword">const</span> dpr = <span class="built_in">window</span>.devicePixelRatio;</div><div class="line"><span class="keyword">var</span> meta = <span class="built_in">document</span>.createElement(<span class="string">'meta'</span>);</div><div class="line">meta.setAttribute(<span class="string">'name'</span>, <span class="string">'viewport'</span>);</div><div class="line">meta.setAttribute(<span class="string">'content'</span>, <span class="string">'width=device-width, initial-scale='</span> + <span class="number">1</span> / dpr + <span class="string">', maximum-scale='</span> + <span class="number">1</span> / dpr + <span class="string">', minimum-scale='</span> + <span class="number">1</span> / dpr + <span class="string">', user-scalable=no'</span>);</div><div class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(meta);</div></pre></td></tr></table></figure></p>
<h4 id="设计稿"><a href="#设计稿" class="headerlink" title="设计稿"></a>设计稿</h4><p>一般来说设计稿都是以ipone6的分辨率进行设计的，所以设计给的稿子双倍的原因是iphone6这种屏幕属于高清屏，也就是2dpr。</p>
<ul>
<li>sass</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@function px2rem($px)&#123;</div><div class="line">    $rem : 75px;</div><div class="line">    @return ($px/$rem) + rem;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>stylus</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">px2rem</span><span class="params">(px)</span></span></div><div class="line">   <span class="variable">$rem</span>=<span class="number">75</span></div><div class="line">   (px/<span class="variable">$rem</span>)rem</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;rem&quot;&gt;&lt;a href=&quot;#rem&quot; class=&quot;headerlink&quot; title=&quot;rem&quot;&gt;&lt;/a&gt;rem&lt;/h2&gt;&lt;h4 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h4&gt;&lt;b
    
    </summary>
    
      <category term="Web" scheme="//kenve.github.io/categories/Web/"/>
    
    
      <category term="javascript" scheme="//kenve.github.io/tags/javascript/"/>
    
      <category term="html5" scheme="//kenve.github.io/tags/html5/"/>
    
  </entry>
  
  <entry>
    <title>项目中用过的那些javascript工具函数</title>
    <link href="//kenve.github.io/2017/01/20/javascript-utils/"/>
    <id>//kenve.github.io/2017/01/20/javascript-utils/</id>
    <published>2017-01-19T16:00:00.000Z</published>
    <updated>2017-04-26T17:04:35.667Z</updated>
    
    <content type="html"><![CDATA[<h4 id="时间戳转换为YY-MM-DD-hh-mm-ss-字符串格式"><a href="#时间戳转换为YY-MM-DD-hh-mm-ss-字符串格式" class="headerlink" title="时间戳转换为YY-MM-DD hh:mm:ss 字符串格式"></a>时间戳转换为YY-MM-DD hh:mm:ss 字符串格式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">timeFormat(timestamp) &#123;</div><div class="line">    <span class="comment">//timestamp是整数，否则要parseInt转换</span></div><div class="line">    <span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>(timestamp);</div><div class="line">    <span class="keyword">var</span> y = time.getFullYear();</div><div class="line">    <span class="keyword">var</span> m = time.getMonth() + <span class="number">1</span>;</div><div class="line">    <span class="keyword">var</span> d = time.getDate();</div><div class="line">    <span class="keyword">var</span> h = time.getHours();</div><div class="line">    <span class="keyword">var</span> mm = time.getMinutes();</div><div class="line">    <span class="keyword">var</span> s = time.getSeconds();</div><div class="line">    <span class="keyword">return</span> y + <span class="string">'-'</span> + add02Time(m) + <span class="string">'-'</span> + add02Time(d) + <span class="string">' '</span> +add02Time(h) + <span class="string">':'</span> +add02Time(mm) + <span class="string">':'</span> + add02Time(s);</div><div class="line">&#125;;</div><div class="line">add02Time(m) &#123;</div><div class="line">    <span class="keyword">return</span> m &lt; <span class="number">10</span> ? <span class="string">'0'</span> + m : m</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h4 id="把对象中的属性拼接到URL参数中（url-a-x-amp-b-y）"><a href="#把对象中的属性拼接到URL参数中（url-a-x-amp-b-y）" class="headerlink" title="把对象中的属性拼接到URL参数中（url?a=x&amp;b=y）"></a>把对象中的属性拼接到URL参数中（url?a=x&amp;b=y）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">joinParamsInGetReq(url, param) &#123;</div><div class="line">    <span class="keyword">if</span> (param) &#123;</div><div class="line">        <span class="keyword">let</span> paramsArray = []</div><div class="line">        <span class="built_in">Object</span>.keys(param).forEach(<span class="function"><span class="params">key</span> =&gt;</span> paramsArray.push(key + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(param[key])))</div><div class="line">        <span class="keyword">if</span> (url.search(<span class="regexp">/\?/</span>) === <span class="number">-1</span>) &#123;</div><div class="line">            url += <span class="string">'?'</span> + paramsArray.join(<span class="string">'&amp;'</span>)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            url += <span class="string">'&amp;'</span> + paramsArray.join(<span class="string">'&amp;'</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> url;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h4 id="对象或数组的深拷贝"><a href="#对象或数组的深拷贝" class="headerlink" title="对象或数组的深拷贝"></a>对象或数组的深拷贝</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">deepCopyObj(obj) &#123;</div><div class="line">    <span class="keyword">var</span> str, newobj = obj.constructor === <span class="built_in">Array</span> ? [] : &#123;&#125;;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">'object'</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.JSON) &#123;</div><div class="line">        str = <span class="built_in">JSON</span>.stringify(obj), <span class="comment">//系列化对象</span></div><div class="line">            newobj = <span class="built_in">JSON</span>.parse(str); <span class="comment">//还原</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</div><div class="line">            newobj[i] = <span class="keyword">typeof</span> obj[i] === <span class="string">'object'</span> ? <span class="keyword">this</span>.deepCopyObj(obj[i]) : obj[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> newobj;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h4 id="判断浏览器类型"><a href="#判断浏览器类型" class="headerlink" title="判断浏览器类型"></a>判断浏览器类型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 智能机浏览器版本信息:</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> browser = &#123;</div><div class="line">        <span class="attr">versions</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> u = navigator.userAgent,</div><div class="line">                app = navigator.appVersion;</div><div class="line">            <span class="keyword">return</span> &#123; <span class="comment">//移动终端浏览器版本信息 </span></div><div class="line">                trident: u.indexOf(<span class="string">'Trident'</span>) &gt; <span class="number">-1</span>, <span class="comment">//IE内核</span></div><div class="line">                presto: u.indexOf(<span class="string">'Presto'</span>) &gt; <span class="number">-1</span>, <span class="comment">//opera内核</span></div><div class="line">                webKit: u.indexOf(<span class="string">'AppleWebKit'</span>) &gt; <span class="number">-1</span>, <span class="comment">//苹果、谷歌内核</span></div><div class="line">                gecko: u.indexOf(<span class="string">'Gecko'</span>) &gt; <span class="number">-1</span> &amp;&amp; u.indexOf(<span class="string">'KHTML'</span>) == <span class="number">-1</span>, <span class="comment">//火狐内核</span></div><div class="line">                mobile: !!u.match(<span class="regexp">/AppleWebKit.*Mobile.*/</span>) || !!u.match(<span class="regexp">/AppleWebKit/</span>), <span class="comment">//是否为移动终端</span></div><div class="line">                ios: !!u.match(<span class="regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>), <span class="comment">//ios终端</span></div><div class="line">                android: u.indexOf(<span class="string">'Android'</span>) &gt; <span class="number">-1</span> || u.indexOf(<span class="string">'Linux'</span>) &gt; <span class="number">-1</span>, <span class="comment">//android终端或者uc浏览器</span></div><div class="line">                iPhone: u.indexOf(<span class="string">'iPhone'</span>) &gt; <span class="number">-1</span> || u.indexOf(<span class="string">'Mac'</span>) &gt; <span class="number">-1</span>, <span class="comment">//是否为iPhone或者QQHD浏览器</span></div><div class="line">                iPad: u.indexOf(<span class="string">'iPad'</span>) &gt; <span class="number">-1</span>, <span class="comment">//是否iPad</span></div><div class="line">                webApp: u.indexOf(<span class="string">'Safari'</span>) == <span class="number">-1</span>, <span class="comment">//是否web应该程序，没有头部与底部</span></div><div class="line">                wechat: u.toLowerCase().match(<span class="regexp">/MicroMessenger/i</span>) == <span class="string">"micromessenger"</span> <span class="comment">//判断是否为微信浏览器</span></div><div class="line">            &#125;;</div><div class="line">        &#125;(),</div><div class="line">        <span class="attr">language</span>: (navigator.browserLanguage || navigator.language).toLowerCase() <span class="comment">//语言版本</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取cookie</div><div class="line">     * @param  &#123;[type]&#125; c_name [cookie名称]</div><div class="line">     * @return &#123;[type]&#125;        [cookie的value]</div><div class="line">     */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">c_name</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.cookie.length &gt; <span class="number">0</span>) &#123;</div><div class="line">        c_start = <span class="built_in">document</span>.cookie.indexOf(c_name + <span class="string">"="</span>);</div><div class="line">        <span class="keyword">if</span> (c_start != <span class="number">-1</span>) &#123;</div><div class="line">            c_start = c_start + c_name.length + <span class="number">1</span>;</div><div class="line">            c_end = <span class="built_in">document</span>.cookie.indexOf(<span class="string">";"</span>, c_start);</div><div class="line">            <span class="keyword">if</span> (c_end == <span class="number">-1</span>) c_end = <span class="built_in">document</span>.cookie.length;</div><div class="line">            <span class="keyword">return</span> <span class="built_in">unescape</span>(<span class="built_in">document</span>.cookie.substring(c_start, c_end));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置cookie的值和日期</div><div class="line"> * @param &#123;[type]&#125; c_name     [cookie名称]</div><div class="line"> * @param &#123;[type]&#125; value      [cookie的值]</div><div class="line"> * @param &#123;[type]&#125; expiredays [cookie有效期]</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">c_name, value, expiredays</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> exdate = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">    exdate.setDate(exdate.getDate() + expiredays);</div><div class="line">    <span class="built_in">document</span>.cookie = c_name + <span class="string">"="</span> + <span class="built_in">escape</span>(value) +</div><div class="line">        ((expiredays == <span class="literal">null</span>) ? <span class="string">""</span> : <span class="string">";expires="</span> + exdate.toGMTString());</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * [删除 cookie]</div><div class="line"> * @param  &#123;[type]&#125; name [description]</div><div class="line"> * @return &#123;[type]&#125;      [description]</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">delCookie</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> exp = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">    exp.setTime(exp.getTime() - <span class="number">1</span>);</div><div class="line">    <span class="keyword">var</span> cval = getCookie(name);</div><div class="line">    <span class="keyword">if</span> (cval != <span class="literal">null</span>) <span class="built_in">document</span>.cookie = name + <span class="string">"="</span> + cval + <span class="string">";expires="</span> + exp.toGMTString();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Toast提示"><a href="#Toast提示" class="headerlink" title="Toast提示"></a>Toast提示</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">warn</span>(<span class="params">msg, opt, left, top</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (opt) &#123;</div><div class="line">        <span class="keyword">var</span> obj = $(<span class="string">"#"</span> + opt);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">new</span> Toast(&#123; <span class="attr">context</span>: $(<span class="string">'body'</span>), <span class="attr">message</span>: msg &#125;, obj, left, top).show();</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> Toast = <span class="function"><span class="keyword">function</span>(<span class="params">config, obj, left, top</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.context = config.context == <span class="literal">null</span> ? $(<span class="string">'body'</span>) : config.context; <span class="comment">//上下文</span></div><div class="line">    <span class="keyword">this</span>.message = config.message; <span class="comment">//显示内容</span></div><div class="line">    <span class="keyword">this</span>.time = config.time == <span class="literal">null</span> ? <span class="number">3000</span> : config.time; <span class="comment">//持续时间</span></div><div class="line">    <span class="keyword">this</span>.left = config.left; <span class="comment">//距容器左边的距离</span></div><div class="line">    <span class="comment">// this.top = (screen.availHeight / 4) * 2; //距容器上方的距离</span></div><div class="line">    <span class="keyword">this</span>.top = config.top;</div><div class="line">    <span class="keyword">if</span> (obj) &#123;</div><div class="line">        <span class="keyword">this</span>.left = obj.offset().left + left;</div><div class="line">        <span class="keyword">this</span>.top = obj.offset().top + top;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.init();</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> msgEntity;</div><div class="line">Toast.prototype = &#123;</div><div class="line">    <span class="comment">//初始化显示的位置内容等</span></div><div class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="string">"#toastMessage"</span>).remove();</div><div class="line">        <span class="comment">//设置消息体</span></div><div class="line">        <span class="keyword">var</span> msgDIV = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">        msgDIV.push(<span class="string">'&lt;div id="toastMessage"&gt;'</span>);</div><div class="line">        msgDIV.push(<span class="string">'&lt;span&gt;'</span> + <span class="keyword">this</span>.message + <span class="string">'&lt;/span&gt;'</span>);</div><div class="line">        msgDIV.push(<span class="string">'&lt;/div&gt;'</span>);</div><div class="line">        msgEntity = $(msgDIV.join(<span class="string">''</span>)).appendTo(<span class="keyword">this</span>.context);</div><div class="line">        <span class="comment">//设置消息样式</span></div><div class="line">        <span class="keyword">var</span> left = <span class="keyword">this</span>.left == <span class="literal">null</span> ? <span class="keyword">this</span>.context.width() / <span class="number">2</span> - msgEntity.find(<span class="string">'span'</span>).width() / <span class="number">2</span> - <span class="number">20</span> : <span class="keyword">this</span>.left; <span class="comment">//padding 10+10</span></div><div class="line">        <span class="keyword">var</span> top = <span class="keyword">this</span>.top == <span class="literal">null</span> ? <span class="string">'55%'</span> : <span class="keyword">this</span>.top;</div><div class="line">        msgEntity.css(&#123; <span class="attr">position</span>: <span class="string">'fixed'</span>, <span class="attr">top</span>: top, <span class="string">'z-index'</span>: <span class="string">'99'</span>, <span class="attr">left</span>: left, <span class="string">'background'</span>: <span class="string">'#000'</span>, <span class="attr">color</span>: <span class="string">'white'</span>, <span class="string">'font-size'</span>: <span class="string">'.26rem'</span>, <span class="attr">padding</span>: <span class="string">'10px'</span>, <span class="string">'border-radius'</span>: <span class="string">'4px'</span>, <span class="string">'-moz-border-radius'</span>: <span class="string">'4px'</span>, <span class="string">'-webkit-border-radius'</span>: <span class="string">'4px'</span> &#125;);</div><div class="line">        <span class="comment">//msgEntity.addClass(".toast");</span></div><div class="line">        msgEntity.hide();</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//显示动画</span></div><div class="line">    show: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        msgEntity.show();</div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            msgEntity.hide();</div><div class="line">        &#125;, <span class="keyword">this</span>.time / <span class="number">2</span>);</div><div class="line">        <span class="comment">// msgEntity.fadeIn(this.time / 2);</span></div><div class="line">        <span class="comment">// msgEntity.fadeOut(this.time / 2);</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="截取规定长度的字符串"><a href="#截取规定长度的字符串" class="headerlink" title="截取规定长度的字符串"></a>截取规定长度的字符串</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 截取字符串</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">cutString</span>(<span class="params">str, len</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (str.length * <span class="number">2</span> &lt;= len) &#123;</div><div class="line">        <span class="keyword">return</span> str;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> strlen = <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> s = <span class="string">""</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</div><div class="line">        s = s + str.charAt(i);</div><div class="line">        <span class="keyword">if</span> (str.charCodeAt(i) &gt; <span class="number">128</span>) &#123;</div><div class="line">            strlen = strlen + <span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span> (strlen &gt;= len) &#123;</div><div class="line">                <span class="keyword">return</span> s.substring(<span class="number">0</span>, s.length - <span class="number">1</span>) + <span class="string">"..."</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            strlen = strlen + <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (strlen &gt;= len) &#123;</div><div class="line">                <span class="keyword">return</span> s.substring(<span class="number">0</span>, s.length - <span class="number">2</span>) + <span class="string">"..."</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> s;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="返回顶部"><a href="#返回顶部" class="headerlink" title="返回顶部"></a>返回顶部</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">backTop</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">'html,body'</span>).scrollTop(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkPosition</span>(<span class="params">pos</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> ($(<span class="built_in">window</span>).scrollTop() &gt; pos) &#123;</div><div class="line">        $(<span class="string">'#top'</span>).css(<span class="string">'visibility'</span>, <span class="string">'visible'</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        $(<span class="string">'#top'</span>).css(<span class="string">'visibility'</span>, <span class="string">'hidden'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="根据分辨率设置html的font-size值"><a href="#根据分辨率设置html的font-size值" class="headerlink" title="根据分辨率设置html的font-size值"></a>根据分辨率设置html的font-size值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">! <span class="function"><span class="keyword">function</span>(<span class="params">win</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> doc = win.document,</div><div class="line">        docEle = doc.documentElement,</div><div class="line">        num = <span class="number">10</span>,</div><div class="line">        changeScreenSize = <span class="string">"orientationchange"</span> <span class="keyword">in</span> win ? <span class="string">"orientationchange"</span> : <span class="string">"resize"</span>,</div><div class="line">        setFontSize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> clientWidth = docEle.clientWidth;</div><div class="line">            docEle.style.fontSize = clientWidth / num + <span class="string">"px"</span></div><div class="line">        &#125;;</div><div class="line">    doc.addEventListener &amp;&amp; (win.addEventListener(changeScreenSize, setFontSize, !<span class="number">1</span>), doc.addEventListener(<span class="string">"DOMContentLoaded"</span>, setFontSize, !<span class="number">1</span>))</div><div class="line">&#125;(<span class="built_in">window</span>);</div></pre></td></tr></table></figure>
<h4 id="判断浏览设备竖屏或者横屏"><a href="#判断浏览设备竖屏或者横屏" class="headerlink" title="判断浏览设备竖屏或者横屏"></a>判断浏览设备竖屏或者横屏</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 判断横屏竖屏</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> supportOrientation = (<span class="keyword">typeof</span> <span class="built_in">window</span>.orientation === <span class="string">'number'</span> &amp;&amp;</div><div class="line">        <span class="keyword">typeof</span> <span class="built_in">window</span>.onorientationchange === <span class="string">'object'</span>);</div><div class="line">    <span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> htmlNode = <span class="built_in">document</span>.body.parentNode,</div><div class="line">            orientation;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> updateOrientation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (supportOrientation) &#123;</div><div class="line">                orientation = <span class="built_in">window</span>.orientation;</div><div class="line">                <span class="keyword">switch</span> (orientation) &#123;</div><div class="line">                    <span class="keyword">case</span> <span class="number">90</span>:</div><div class="line">                    <span class="keyword">case</span> <span class="number">-90</span>:</div><div class="line">                        orientation = <span class="string">'landscape'</span>;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">default</span>:</div><div class="line">                        orientation = <span class="string">'portrait'</span>;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                orientation = (<span class="built_in">window</span>.innerWidth &gt; <span class="built_in">window</span>.innerHeight) ? <span class="string">'landscape'</span> : <span class="string">'portrait'</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            htmlNode.setAttribute(<span class="string">'class'</span>, orientation);</div><div class="line">            <span class="comment">//</span></div><div class="line">            <span class="keyword">if</span> (orientation===<span class="string">'landscape'</span>) &#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'横屏'</span>)</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(orientation===<span class="string">'portrait'</span>)&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'竖屏'</span>)</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">if</span> (supportOrientation) &#123;</div><div class="line">            <span class="built_in">window</span>.addEventListener(<span class="string">'orientationchange'</span>, updateOrientation, <span class="literal">false</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//监听resize事件</span></div><div class="line">            <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, updateOrientation, <span class="literal">false</span>);</div><div class="line">        &#125;</div><div class="line">        updateOrientation();</div><div class="line">    &#125;;</div><div class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, init, <span class="literal">false</span>);</div><div class="line">&#125;)(<span class="built_in">window</span>);</div></pre></td></tr></table></figure>
<h4 id="设置缩放比"><a href="#设置缩放比" class="headerlink" title="设置缩放比"></a>设置缩放比</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//設置縮放 ipone6 2x </span></div><div class="line"><span class="keyword">const</span> dpr = <span class="built_in">window</span>.devicePixelRatio;</div><div class="line"><span class="keyword">var</span> meta = <span class="built_in">document</span>.createElement(<span class="string">'meta'</span>);</div><div class="line">meta.setAttribute(<span class="string">'name'</span>, <span class="string">'viewport'</span>);</div><div class="line">meta.setAttribute(<span class="string">'content'</span>, <span class="string">'width=device-width, initial-scale='</span> + <span class="number">1</span> / dpr + <span class="string">', maximum-scale='</span> + <span class="number">1</span> / dpr + <span class="string">', minimum-scale='</span> + <span class="number">1</span> / dpr + <span class="string">', user-scalable=no'</span>);</div><div class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(meta);</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/* ipone6 设计稿尺寸转rem(sass)*/</div><div class="line">@function px2rem($px)&#123;</div><div class="line">    $rem : 75px;</div><div class="line">    @return ($px/$rem) + rem;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/* ipone6 设计稿尺寸转rem(stylus)*/</div><div class="line"> px2rem(px)</div><div class="line">    $rem=75</div><div class="line">    (px/$rem)rem</div></pre></td></tr></table></figure>
<h4 id="js解析XML-字符串"><a href="#js解析XML-字符串" class="headerlink" title="js解析XML 字符串"></a>js解析XML 字符串</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> loadXML = <span class="function"><span class="keyword">function</span>(<span class="params">xmlString</span>)</span>&#123; <span class="comment">//构建xmldoc对象</span></div><div class="line">   </div><div class="line">     <span class="keyword">var</span> xmlDoc=<span class="literal">null</span>;</div><div class="line">      </div><div class="line">      <span class="keyword">if</span>(<span class="built_in">window</span>.DOMParser)  <span class="comment">//IE9+,FF,webkit</span></div><div class="line">      &#123;</div><div class="line">            <span class="keyword">try</span>&#123;</div><div class="line">                </div><div class="line">                domParser = <span class="keyword">new</span>  DOMParser();</div><div class="line">                xmlDoc = domParser.parseFromString(xmlString, <span class="string">'text/xml'</span>);</div><div class="line">            &#125;<span class="keyword">catch</span>(e)&#123;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">window</span>.DOMParser &amp;&amp; <span class="built_in">window</span>.ActiveXObject)</div><div class="line">        &#123;   <span class="comment">//window.DOMParser 判断是否是非ie浏览器</span></div><div class="line">            <span class="keyword">var</span> xmlDomVersions = [<span class="string">'MSXML2.DOMDocument'</span>,<span class="string">'Microsoft.XMLDOM'</span>];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;xmlDomVersions.length;i++)&#123;</div><div class="line">                <span class="keyword">try</span>&#123;</div><div class="line">                    xmlDoc = <span class="keyword">new</span> ActiveXObject(xmlDomVersions[i]);</div><div class="line">                    xmlDoc.async = <span class="literal">false</span>;</div><div class="line">                    xmlDoc.loadXML(xmlString); <span class="comment">//loadXML方法载入xml字符串</span></div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;<span class="keyword">catch</span>(e)&#123;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> xmlDoc;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;时间戳转换为YY-MM-DD-hh-mm-ss-字符串格式&quot;&gt;&lt;a href=&quot;#时间戳转换为YY-MM-DD-hh-mm-ss-字符串格式&quot; class=&quot;headerlink&quot; title=&quot;时间戳转换为YY-MM-DD hh:mm:ss 字符串格式&quot;&gt;&lt;/a
    
    </summary>
    
      <category term="Web" scheme="//kenve.github.io/categories/Web/"/>
    
    
      <category term="javascript" scheme="//kenve.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Undersocre 源码阅读</title>
    <link href="//kenve.github.io/2016/09/18/underscore-source-code-learning/"/>
    <id>//kenve.github.io/2016/09/18/underscore-source-code-learning/</id>
    <published>2016-09-17T19:37:21.000Z</published>
    <updated>2017-04-26T15:43:25.159Z</updated>
    
    <content type="html"><![CDATA[<p>源码版本：Underscore.js 1.8.3</p>
<a id="more"></a>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div><div class="line">719</div><div class="line">720</div><div class="line">721</div><div class="line">722</div><div class="line">723</div><div class="line">724</div><div class="line">725</div><div class="line">726</div><div class="line">727</div><div class="line">728</div><div class="line">729</div><div class="line">730</div><div class="line">731</div><div class="line">732</div><div class="line">733</div><div class="line">734</div><div class="line">735</div><div class="line">736</div><div class="line">737</div><div class="line">738</div><div class="line">739</div><div class="line">740</div><div class="line">741</div><div class="line">742</div><div class="line">743</div><div class="line">744</div><div class="line">745</div><div class="line">746</div><div class="line">747</div><div class="line">748</div><div class="line">749</div><div class="line">750</div><div class="line">751</div><div class="line">752</div><div class="line">753</div><div class="line">754</div><div class="line">755</div><div class="line">756</div><div class="line">757</div><div class="line">758</div><div class="line">759</div><div class="line">760</div><div class="line">761</div><div class="line">762</div><div class="line">763</div><div class="line">764</div><div class="line">765</div><div class="line">766</div><div class="line">767</div><div class="line">768</div><div class="line">769</div><div class="line">770</div><div class="line">771</div><div class="line">772</div><div class="line">773</div><div class="line">774</div><div class="line">775</div><div class="line">776</div><div class="line">777</div><div class="line">778</div><div class="line">779</div><div class="line">780</div><div class="line">781</div><div class="line">782</div><div class="line">783</div><div class="line">784</div><div class="line">785</div><div class="line">786</div><div class="line">787</div><div class="line">788</div><div class="line">789</div><div class="line">790</div><div class="line">791</div><div class="line">792</div><div class="line">793</div><div class="line">794</div><div class="line">795</div><div class="line">796</div><div class="line">797</div><div class="line">798</div><div class="line">799</div><div class="line">800</div><div class="line">801</div><div class="line">802</div><div class="line">803</div><div class="line">804</div><div class="line">805</div><div class="line">806</div><div class="line">807</div><div class="line">808</div><div class="line">809</div><div class="line">810</div><div class="line">811</div><div class="line">812</div><div class="line">813</div><div class="line">814</div><div class="line">815</div><div class="line">816</div><div class="line">817</div><div class="line">818</div><div class="line">819</div><div class="line">820</div><div class="line">821</div><div class="line">822</div><div class="line">823</div><div class="line">824</div><div class="line">825</div><div class="line">826</div><div class="line">827</div><div class="line">828</div><div class="line">829</div><div class="line">830</div><div class="line">831</div><div class="line">832</div><div class="line">833</div><div class="line">834</div><div class="line">835</div><div class="line">836</div><div class="line">837</div><div class="line">838</div><div class="line">839</div><div class="line">840</div><div class="line">841</div><div class="line">842</div><div class="line">843</div><div class="line">844</div><div class="line">845</div><div class="line">846</div><div class="line">847</div><div class="line">848</div><div class="line">849</div><div class="line">850</div><div class="line">851</div><div class="line">852</div><div class="line">853</div><div class="line">854</div><div class="line">855</div><div class="line">856</div><div class="line">857</div><div class="line">858</div><div class="line">859</div><div class="line">860</div><div class="line">861</div><div class="line">862</div><div class="line">863</div><div class="line">864</div><div class="line">865</div><div class="line">866</div><div class="line">867</div><div class="line">868</div><div class="line">869</div><div class="line">870</div><div class="line">871</div><div class="line">872</div><div class="line">873</div><div class="line">874</div><div class="line">875</div><div class="line">876</div><div class="line">877</div><div class="line">878</div><div class="line">879</div><div class="line">880</div><div class="line">881</div><div class="line">882</div><div class="line">883</div><div class="line">884</div><div class="line">885</div><div class="line">886</div><div class="line">887</div><div class="line">888</div><div class="line">889</div><div class="line">890</div><div class="line">891</div><div class="line">892</div><div class="line">893</div><div class="line">894</div><div class="line">895</div><div class="line">896</div><div class="line">897</div><div class="line">898</div><div class="line">899</div><div class="line">900</div><div class="line">901</div><div class="line">902</div><div class="line">903</div><div class="line">904</div><div class="line">905</div><div class="line">906</div><div class="line">907</div><div class="line">908</div><div class="line">909</div><div class="line">910</div><div class="line">911</div><div class="line">912</div><div class="line">913</div><div class="line">914</div><div class="line">915</div><div class="line">916</div><div class="line">917</div><div class="line">918</div><div class="line">919</div><div class="line">920</div><div class="line">921</div><div class="line">922</div><div class="line">923</div><div class="line">924</div><div class="line">925</div><div class="line">926</div><div class="line">927</div><div class="line">928</div><div class="line">929</div><div class="line">930</div><div class="line">931</div><div class="line">932</div><div class="line">933</div><div class="line">934</div><div class="line">935</div><div class="line">936</div><div class="line">937</div><div class="line">938</div><div class="line">939</div><div class="line">940</div><div class="line">941</div><div class="line">942</div><div class="line">943</div><div class="line">944</div><div class="line">945</div><div class="line">946</div><div class="line">947</div><div class="line">948</div><div class="line">949</div><div class="line">950</div><div class="line">951</div><div class="line">952</div><div class="line">953</div><div class="line">954</div><div class="line">955</div><div class="line">956</div><div class="line">957</div><div class="line">958</div><div class="line">959</div><div class="line">960</div><div class="line">961</div><div class="line">962</div><div class="line">963</div><div class="line">964</div><div class="line">965</div><div class="line">966</div><div class="line">967</div><div class="line">968</div><div class="line">969</div><div class="line">970</div><div class="line">971</div><div class="line">972</div><div class="line">973</div><div class="line">974</div><div class="line">975</div><div class="line">976</div><div class="line">977</div><div class="line">978</div><div class="line">979</div><div class="line">980</div><div class="line">981</div><div class="line">982</div><div class="line">983</div><div class="line">984</div><div class="line">985</div><div class="line">986</div><div class="line">987</div><div class="line">988</div><div class="line">989</div><div class="line">990</div><div class="line">991</div><div class="line">992</div><div class="line">993</div><div class="line">994</div><div class="line">995</div><div class="line">996</div><div class="line">997</div><div class="line">998</div><div class="line">999</div><div class="line">1000</div><div class="line">1001</div><div class="line">1002</div><div class="line">1003</div><div class="line">1004</div><div class="line">1005</div><div class="line">1006</div><div class="line">1007</div><div class="line">1008</div><div class="line">1009</div><div class="line">1010</div><div class="line">1011</div><div class="line">1012</div><div class="line">1013</div><div class="line">1014</div><div class="line">1015</div><div class="line">1016</div><div class="line">1017</div><div class="line">1018</div><div class="line">1019</div><div class="line">1020</div><div class="line">1021</div><div class="line">1022</div><div class="line">1023</div><div class="line">1024</div><div class="line">1025</div><div class="line">1026</div><div class="line">1027</div><div class="line">1028</div><div class="line">1029</div><div class="line">1030</div><div class="line">1031</div><div class="line">1032</div><div class="line">1033</div><div class="line">1034</div><div class="line">1035</div><div class="line">1036</div><div class="line">1037</div><div class="line">1038</div><div class="line">1039</div><div class="line">1040</div><div class="line">1041</div><div class="line">1042</div><div class="line">1043</div><div class="line">1044</div><div class="line">1045</div><div class="line">1046</div><div class="line">1047</div><div class="line">1048</div><div class="line">1049</div><div class="line">1050</div><div class="line">1051</div><div class="line">1052</div><div class="line">1053</div><div class="line">1054</div><div class="line">1055</div><div class="line">1056</div><div class="line">1057</div><div class="line">1058</div><div class="line">1059</div><div class="line">1060</div><div class="line">1061</div><div class="line">1062</div><div class="line">1063</div><div class="line">1064</div><div class="line">1065</div><div class="line">1066</div><div class="line">1067</div><div class="line">1068</div><div class="line">1069</div><div class="line">1070</div><div class="line">1071</div><div class="line">1072</div><div class="line">1073</div><div class="line">1074</div><div class="line">1075</div><div class="line">1076</div><div class="line">1077</div><div class="line">1078</div><div class="line">1079</div><div class="line">1080</div><div class="line">1081</div><div class="line">1082</div><div class="line">1083</div><div class="line">1084</div><div class="line">1085</div><div class="line">1086</div><div class="line">1087</div><div class="line">1088</div><div class="line">1089</div><div class="line">1090</div><div class="line">1091</div><div class="line">1092</div><div class="line">1093</div><div class="line">1094</div><div class="line">1095</div><div class="line">1096</div><div class="line">1097</div><div class="line">1098</div><div class="line">1099</div><div class="line">1100</div><div class="line">1101</div><div class="line">1102</div><div class="line">1103</div><div class="line">1104</div><div class="line">1105</div><div class="line">1106</div><div class="line">1107</div><div class="line">1108</div><div class="line">1109</div><div class="line">1110</div><div class="line">1111</div><div class="line">1112</div><div class="line">1113</div><div class="line">1114</div><div class="line">1115</div><div class="line">1116</div><div class="line">1117</div><div class="line">1118</div><div class="line">1119</div><div class="line">1120</div><div class="line">1121</div><div class="line">1122</div><div class="line">1123</div><div class="line">1124</div><div class="line">1125</div><div class="line">1126</div><div class="line">1127</div><div class="line">1128</div><div class="line">1129</div><div class="line">1130</div><div class="line">1131</div><div class="line">1132</div><div class="line">1133</div><div class="line">1134</div><div class="line">1135</div><div class="line">1136</div><div class="line">1137</div><div class="line">1138</div><div class="line">1139</div><div class="line">1140</div><div class="line">1141</div><div class="line">1142</div><div class="line">1143</div><div class="line">1144</div><div class="line">1145</div><div class="line">1146</div><div class="line">1147</div><div class="line">1148</div><div class="line">1149</div><div class="line">1150</div><div class="line">1151</div><div class="line">1152</div><div class="line">1153</div><div class="line">1154</div><div class="line">1155</div><div class="line">1156</div><div class="line">1157</div><div class="line">1158</div><div class="line">1159</div><div class="line">1160</div><div class="line">1161</div><div class="line">1162</div><div class="line">1163</div><div class="line">1164</div><div class="line">1165</div><div class="line">1166</div><div class="line">1167</div><div class="line">1168</div><div class="line">1169</div><div class="line">1170</div><div class="line">1171</div><div class="line">1172</div><div class="line">1173</div><div class="line">1174</div><div class="line">1175</div><div class="line">1176</div><div class="line">1177</div><div class="line">1178</div><div class="line">1179</div><div class="line">1180</div><div class="line">1181</div><div class="line">1182</div><div class="line">1183</div><div class="line">1184</div><div class="line">1185</div><div class="line">1186</div><div class="line">1187</div><div class="line">1188</div><div class="line">1189</div><div class="line">1190</div><div class="line">1191</div><div class="line">1192</div><div class="line">1193</div><div class="line">1194</div><div class="line">1195</div><div class="line">1196</div><div class="line">1197</div><div class="line">1198</div><div class="line">1199</div><div class="line">1200</div><div class="line">1201</div><div class="line">1202</div><div class="line">1203</div><div class="line">1204</div><div class="line">1205</div><div class="line">1206</div><div class="line">1207</div><div class="line">1208</div><div class="line">1209</div><div class="line">1210</div><div class="line">1211</div><div class="line">1212</div><div class="line">1213</div><div class="line">1214</div><div class="line">1215</div><div class="line">1216</div><div class="line">1217</div><div class="line">1218</div><div class="line">1219</div><div class="line">1220</div><div class="line">1221</div><div class="line">1222</div><div class="line">1223</div><div class="line">1224</div><div class="line">1225</div><div class="line">1226</div><div class="line">1227</div><div class="line">1228</div><div class="line">1229</div><div class="line">1230</div><div class="line">1231</div><div class="line">1232</div><div class="line">1233</div><div class="line">1234</div><div class="line">1235</div><div class="line">1236</div><div class="line">1237</div><div class="line">1238</div><div class="line">1239</div><div class="line">1240</div><div class="line">1241</div><div class="line">1242</div><div class="line">1243</div><div class="line">1244</div><div class="line">1245</div><div class="line">1246</div><div class="line">1247</div><div class="line">1248</div><div class="line">1249</div><div class="line">1250</div><div class="line">1251</div><div class="line">1252</div><div class="line">1253</div><div class="line">1254</div><div class="line">1255</div><div class="line">1256</div><div class="line">1257</div><div class="line">1258</div><div class="line">1259</div><div class="line">1260</div><div class="line">1261</div><div class="line">1262</div><div class="line">1263</div><div class="line">1264</div><div class="line">1265</div><div class="line">1266</div><div class="line">1267</div><div class="line">1268</div><div class="line">1269</div><div class="line">1270</div><div class="line">1271</div><div class="line">1272</div><div class="line">1273</div><div class="line">1274</div><div class="line">1275</div><div class="line">1276</div><div class="line">1277</div><div class="line">1278</div><div class="line">1279</div><div class="line">1280</div><div class="line">1281</div><div class="line">1282</div><div class="line">1283</div><div class="line">1284</div><div class="line">1285</div><div class="line">1286</div><div class="line">1287</div><div class="line">1288</div><div class="line">1289</div><div class="line">1290</div><div class="line">1291</div><div class="line">1292</div><div class="line">1293</div><div class="line">1294</div><div class="line">1295</div><div class="line">1296</div><div class="line">1297</div><div class="line">1298</div><div class="line">1299</div><div class="line">1300</div><div class="line">1301</div><div class="line">1302</div><div class="line">1303</div><div class="line">1304</div><div class="line">1305</div><div class="line">1306</div><div class="line">1307</div><div class="line">1308</div><div class="line">1309</div><div class="line">1310</div><div class="line">1311</div><div class="line">1312</div><div class="line">1313</div><div class="line">1314</div><div class="line">1315</div><div class="line">1316</div><div class="line">1317</div><div class="line">1318</div><div class="line">1319</div><div class="line">1320</div><div class="line">1321</div><div class="line">1322</div><div class="line">1323</div><div class="line">1324</div><div class="line">1325</div><div class="line">1326</div><div class="line">1327</div><div class="line">1328</div><div class="line">1329</div><div class="line">1330</div><div class="line">1331</div><div class="line">1332</div><div class="line">1333</div><div class="line">1334</div><div class="line">1335</div><div class="line">1336</div><div class="line">1337</div><div class="line">1338</div><div class="line">1339</div><div class="line">1340</div><div class="line">1341</div><div class="line">1342</div><div class="line">1343</div><div class="line">1344</div><div class="line">1345</div><div class="line">1346</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//     Underscore.js 1.8.3</div><div class="line">//     http://underscorejs.org</div><div class="line">//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters &amp; Editors</div><div class="line">//     Underscore may be freely distributed under the MIT license.</div><div class="line"></div><div class="line">// underscore的代码包裹在一个匿名自执行函数中 </div><div class="line">(function() &#123;</div><div class="line"></div><div class="line">		 // Baseline setup</div><div class="line">		 // --------------</div><div class="line"></div><div class="line">         // 创建一个全局对象, 在浏览器中表示为window对象, 在Node.js中表示global对象</div><div class="line">         var root = this;</div><div class="line"></div><div class="line">         // 保存"_"(下划线变量)被覆盖之前的值</div><div class="line">         // 如果出现命名冲突或考虑到规范, 可通过_.noConflict()方法恢复"_"被Underscore占用之前的值, 并返回Underscore对象以便重新命名</div><div class="line">         var previousUnderscore = root._;</div><div class="line"></div><div class="line">         // 创建一个空的对象常量, 便于内部共享使用</div><div class="line">         var breaker = &#123;&#125;;</div><div class="line"></div><div class="line">         // 将内置对象的原型链缓存在局部变量, 方便快速调用</div><div class="line">         var ArrayProto = Array.prototype, //</div><div class="line">         ObjProto = Object.prototype, //</div><div class="line">         FuncProto = Function.prototype;</div><div class="line"></div><div class="line">         // 将内置对象原型中的常用方法缓存在局部变量, 方便快速调用</div><div class="line">         var slice = ArrayProto.slice, //</div><div class="line">         unshift = ArrayProto.unshift, //</div><div class="line">         toString = ObjProto.toString, //</div><div class="line">         hasOwnProperty = ObjProto.hasOwnProperty;</div><div class="line"></div><div class="line">         // 这里定义了一些JavaScript 1.6提供的新方法</div><div class="line">         // 如果宿主环境中支持这些方法则优先调用, 如果宿主环境中没有提供, 则会由Underscore实现</div><div class="line">         var nativeForEach = ArrayProto.forEach, //</div><div class="line">         nativeMap = ArrayProto.map, //</div><div class="line">         nativeReduce = ArrayProto.reduce, //</div><div class="line">         nativeReduceRight = ArrayProto.reduceRight, //</div><div class="line">         nativeFilter = ArrayProto.filter, //</div><div class="line">         nativeEvery = ArrayProto.every, //</div><div class="line">         nativeSome = ArrayProto.some, //</div><div class="line">         nativeIndexOf = ArrayProto.indexOf, //</div><div class="line">         nativeLastIndexOf = ArrayProto.lastIndexOf, //</div><div class="line">         nativeIsArray = Array.isArray, //</div><div class="line">         nativeKeys = Object.keys, //</div><div class="line">         nativeBind = FuncProto.bind;</div><div class="line"></div><div class="line">         // 创建对象式的调用方式, 将返回一个Underscore包装器, 包装器对象的原型中包含Underscore所有方法(类似与将DOM对象包装为一个jQuery对象)</div><div class="line">         var _ = function(obj) &#123;</div><div class="line">             // 所有Underscore对象在内部均通过wrapper对象进行构造</div><div class="line">             return new wrapper(obj);</div><div class="line">         &#125;;</div><div class="line">         // 针对不同的宿主环境, 将Undersocre的命名变量存放到不同的对象中</div><div class="line">         if( typeof exports !== 'undefined') &#123;// Node.js环境</div><div class="line">             if( typeof module !== 'undefined' &amp;&amp; module.exports) &#123;</div><div class="line">                 exports = module.exports = _;</div><div class="line">             &#125;</div><div class="line">             exports._ = _;</div><div class="line">         &#125; else &#123;// 浏览器环境中Underscore的命名变量被挂在window对象中</div><div class="line">             root['_'] = _;</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         // 版本声明</div><div class="line">         _.VERSION = '1.3.3';</div><div class="line"></div><div class="line">         // 集合相关的方法(数据和对象的通用处理方法)</div><div class="line">         // --------------------</div><div class="line"></div><div class="line">         // 迭代处理器, 对集合中每一个元素执行处理器方法</div><div class="line">         var each = _.each = _.forEach = function(obj, iterator, context) &#123;</div><div class="line">             // 不处理空值</div><div class="line">             if(obj == null)</div><div class="line">                 return;</div><div class="line">             if(nativeForEach &amp;&amp; obj.forEach === nativeForEach) &#123;</div><div class="line">                 // 如果宿主环境支持, 则优先调用JavaScript 1.6提供的forEach方法</div><div class="line">                 obj.forEach(iterator, context);</div><div class="line">             &#125; else if(obj.length === +obj.length) &#123;</div><div class="line">                 // 对&lt;数组&gt;中每一个元素执行处理器方法</div><div class="line">                 for(var i = 0, l = obj.length; i &lt; l; i++) &#123;</div><div class="line">                     if( i in obj &amp;&amp; iterator.call(context, obj[i], i, obj) === breaker)</div><div class="line">                         return;</div><div class="line">                 &#125;</div><div class="line">             &#125; else &#123;</div><div class="line">                 // 对&lt;对象&gt;中每一个元素执行处理器方法</div><div class="line">                 for(var key in obj) &#123;</div><div class="line">                     if(_.has(obj, key)) &#123;</div><div class="line">                         if(iterator.call(context, obj[key], key, obj) === breaker)</div><div class="line">                             return;</div><div class="line">                     &#125;</div><div class="line">                 &#125;</div><div class="line">             &#125;</div><div class="line">         &#125;;</div><div class="line">         // 迭代处理器, 与each方法的差异在于map会存储每次迭代的返回值, 并作为一个新的数组返回</div><div class="line">         _.map = _.collect = function(obj, iterator, context) &#123;</div><div class="line">             // 用于存放返回值的数组</div><div class="line">             var results = [];</div><div class="line">             if(obj == null)</div><div class="line">                 return results;</div><div class="line">             // 优先调用宿主环境提供的map方法</div><div class="line">             if(nativeMap &amp;&amp; obj.map === nativeMap)</div><div class="line">                 return obj.map(iterator, context);</div><div class="line">             // 迭代处理集合中的元素</div><div class="line">             each(obj, function(value, index, list) &#123;</div><div class="line">                 // 将每次迭代处理的返回值存储到results数组</div><div class="line">                 results[results.length] = iterator.call(context, value, index, list);</div><div class="line">             &#125;);</div><div class="line">             // 返回处理结果</div><div class="line">             if(obj.length === +obj.length)</div><div class="line">                 results.length = obj.length;</div><div class="line">             return results;</div><div class="line">         &#125;;</div><div class="line">         // 将集合中每个元素放入迭代处理器, 并将本次迭代的返回值作为"memo"传递到下一次迭代, 一般用于累计结果或连接数据</div><div class="line">         _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) &#123;</div><div class="line">             // 通过参数数量检查是否存在初始值</div><div class="line">             var initial = arguments.length &gt; 2;</div><div class="line">             if(obj == null)</div><div class="line">                 obj = [];</div><div class="line">             // 优先调用宿主环境提供的reduce方法</div><div class="line">             if(nativeReduce &amp;&amp; obj.reduce === nativeReduce &amp;&amp; false) &#123;</div><div class="line">                 if(context)</div><div class="line">                     iterator = _.bind(iterator, context);</div><div class="line">                 return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);</div><div class="line">             &#125;</div><div class="line">             // 迭代处理集合中的元素</div><div class="line">             each(obj, function(value, index, list) &#123;</div><div class="line">                 if(!initial) &#123;</div><div class="line">                     // 如果没有初始值, 则将第一个元素作为初始值; 如果被处理的是对象集合, 则默认值为第一个属性的值</div><div class="line">                     memo = value;</div><div class="line">                     initial = true;</div><div class="line">                 &#125; else &#123;</div><div class="line">                     // 记录处理结果, 并将结果传递给下一次迭代</div><div class="line">                     memo = iterator.call(context, memo, value, index, list);</div><div class="line">                 &#125;</div><div class="line">             &#125;);</div><div class="line">             if(!initial)</div><div class="line">                 throw new TypeError('Reduce of empty array with no initial value');</div><div class="line">             return memo;</div><div class="line">         &#125;;</div><div class="line">         // 与reduce作用相似, 将逆向迭代集合中的元素(即从最后一个元素开始直到第一个元素)</div><div class="line">         _.reduceRight = _.foldr = function(obj, iterator, memo, context) &#123;</div><div class="line">             var initial = arguments.length &gt; 2;</div><div class="line">             if(obj == null)</div><div class="line">                 obj = [];</div><div class="line">             // 优先调用宿主环境提供的reduceRight方法</div><div class="line">             if(nativeReduceRight &amp;&amp; obj.reduceRight === nativeReduceRight) &#123;</div><div class="line">                 if(context)</div><div class="line">                     iterator = _.bind(iterator, context);</div><div class="line">                 return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);</div><div class="line">             &#125;</div><div class="line">             // 逆转集合中的元素顺序</div><div class="line">             var reversed = _.toArray(obj).reverse();</div><div class="line">             if(context &amp;&amp; !initial)</div><div class="line">                 iterator = _.bind(iterator, context);</div><div class="line">             // 通过reduce方法处理数据</div><div class="line">             return initial ? _.reduce(reversed, iterator, memo, context) : _.reduce(reversed, iterator);</div><div class="line">         &#125;;</div><div class="line">         // 遍历集合中的元素, 返回第一个能够通过处理器验证的元素</div><div class="line">         _.find = _.detect = function(obj, iterator, context) &#123;</div><div class="line">             // result存放第一个能够通过验证的元素</div><div class="line">             var result;</div><div class="line">             // 通过any方法遍历数据, 并记录通过验证的元素</div><div class="line">             // (如果是在迭代中检查处理器返回状态, 这里使用each方法会更合适)</div><div class="line">             any(obj, function(value, index, list) &#123;</div><div class="line">                 // 如果处理器返回的结果被转换为Boolean类型后值为true, 则当前记录并返回当前元素</div><div class="line">                 if(iterator.call(context, value, index, list)) &#123;</div><div class="line">                     result = value;</div><div class="line">                     return true;</div><div class="line">                 &#125;</div><div class="line">             &#125;);</div><div class="line">             return result;</div><div class="line">         &#125;;</div><div class="line">         // 与find方法作用类似, 但filter方法会记录下集合中所有通过验证的元素</div><div class="line">         _.filter = _.select = function(obj, iterator, context) &#123;</div><div class="line">             // 用于存储通过验证的元素数组</div><div class="line">             var results = [];</div><div class="line">             if(obj == null)</div><div class="line">                 return results;</div><div class="line">             // 优先调用宿主环境提供的filter方法</div><div class="line">             if(nativeFilter &amp;&amp; obj.filter === nativeFilter)</div><div class="line">                 return obj.filter(iterator, context);</div><div class="line">             // 迭代集合中的元素, 并将通过处理器验证的元素放到数组中并返回</div><div class="line">             each(obj, function(value, index, list) &#123;</div><div class="line">                 if(iterator.call(context, value, index, list))</div><div class="line">                     results[results.length] = value;</div><div class="line">             &#125;);</div><div class="line">             return results;</div><div class="line">         &#125;;</div><div class="line">         // 与filter方法作用相反, 即返回没有通过处理器验证的元素列表</div><div class="line">         _.reject = function(obj, iterator, context) &#123;</div><div class="line">             var results = [];</div><div class="line">             if(obj == null)</div><div class="line">                 return results;</div><div class="line">             each(obj, function(value, index, list) &#123;</div><div class="line">                 if(!iterator.call(context, value, index, list))</div><div class="line">                     results[results.length] = value;</div><div class="line">             &#125;);</div><div class="line">             return results;</div><div class="line">         &#125;;</div><div class="line">         // 如果集合中所有元素均能通过处理器验证, 则返回true</div><div class="line">         _.every = _.all = function(obj, iterator, context) &#123;</div><div class="line">             var result = true;</div><div class="line">             if(obj == null)</div><div class="line">                 return result;</div><div class="line">             // 优先调用宿主环境提供的every方法</div><div class="line">             if(nativeEvery &amp;&amp; obj.every === nativeEvery)</div><div class="line">                 return obj.every(iterator, context);</div><div class="line">             // 迭代集合中的元素</div><div class="line">             each(obj, function(value, index, list) &#123;</div><div class="line">                 // 这里理解为 result = (result &amp;&amp; iterator.call(context, value, index, list))</div><div class="line">                 // 验证处理器的结果被转换为Boolean类型后是否为true值</div><div class="line">                 if(!( result = result &amp;&amp; iterator.call(context, value, index, list)))</div><div class="line">                     return breaker;</div><div class="line">             &#125;);</div><div class="line">             return !!result;</div><div class="line">         &#125;;</div><div class="line">         // 检查集合中任何一个元素在被转换为Boolean类型时, 是否为true值?或者通过处理器处理后, 是否值为true?</div><div class="line">         var any = _.some = _.any = function(obj, iterator, context) &#123;</div><div class="line">             // 如果没有指定处理器参数, 则默认的处理器函数会返回元素本身, 并在迭代时通过将元素转换为Boolean类型来判断是否为true值</div><div class="line">             iterator || ( iterator = _.identity);</div><div class="line">             var result = false;</div><div class="line">             if(obj == null)</div><div class="line">                 return result;</div><div class="line">             // 优先调用宿主环境提供的some方法</div><div class="line">             if(nativeSome &amp;&amp; obj.some === nativeSome)</div><div class="line">                 return obj.some(iterator, context);</div><div class="line">             // 迭代集合中的元素</div><div class="line">             each(obj, function(value, index, list) &#123;</div><div class="line">                 if(result || ( result = iterator.call(context, value, index, list)))</div><div class="line">                     return breaker;</div><div class="line">             &#125;);</div><div class="line">             return !!result;</div><div class="line">         &#125;;</div><div class="line">         // 检查集合中是否有值与目标参数完全匹配(同时将匹配数据类型)</div><div class="line">         _.include = _.contains = function(obj, target) &#123;</div><div class="line">             var found = false;</div><div class="line">             if(obj == null)</div><div class="line">                 return found;</div><div class="line">             // 优先调用宿主环境提供的Array.prototype.indexOf方法</div><div class="line">             if(nativeIndexOf &amp;&amp; obj.indexOf === nativeIndexOf)</div><div class="line">                 return obj.indexOf(target) != -1;</div><div class="line">             // 通过any方法迭代集合中的元素, 验证元素的值和类型与目标是否完全匹配</div><div class="line">             found = any(obj, function(value) &#123;</div><div class="line">                 return value === target;</div><div class="line">             &#125;);</div><div class="line">             return found;</div><div class="line">         &#125;;</div><div class="line">         // 依次调用集合中所有元素的同名方法, 从第3个参数开始, 将被以此传入到元素的调用方法中</div><div class="line">         // 返回一个数组, 存储了所有方法的处理结果</div><div class="line">         _.invoke = function(obj, method) &#123;</div><div class="line">             // 调用同名方法时传递的参数(从第3个参数开始)</div><div class="line">             var args = slice.call(arguments, 2);</div><div class="line">             // 依次调用每个元素的方法, 并将结果放入数组中返回</div><div class="line">             return _.map(obj, function(value) &#123;</div><div class="line">                 return (_.isFunction(method) ? method || value : value[method]).apply(value, args);</div><div class="line">             &#125;);</div><div class="line">         &#125;;</div><div class="line">         // 遍历一个由对象列表组成的数组, 并返回每个对象中的指定属性的值列表</div><div class="line">         _.pluck = function(obj, key) &#123;</div><div class="line">             // 如果某一个对象中不存在该属性, 则返回undefined</div><div class="line">             return _.map(obj, function(value) &#123;</div><div class="line">                 return value[key];</div><div class="line">             &#125;);</div><div class="line">         &#125;;</div><div class="line">         // 返回集合中的最大值, 如果不存在可比较的值, 则返回undefined</div><div class="line">         _.max = function(obj, iterator, context) &#123;</div><div class="line">             // 如果集合是一个数组, 且没有使用处理器, 则使用Math.max获取最大值</div><div class="line">             // 一般会是在一个数组存储了一系列Number类型的数据</div><div class="line">             if(!iterator &amp;&amp; _.isArray(obj) &amp;&amp; obj[0] === +obj[0])</div><div class="line">                 return Math.max.apply(Math, obj);</div><div class="line">             // 对于空值, 直接返回负无穷大</div><div class="line">             if(!iterator &amp;&amp; _.isEmpty(obj))</div><div class="line">                 return -Infinity;</div><div class="line">             // 一个临时的对象, computed用于在比较过程中存储最大值(临时的)</div><div class="line">             var result = &#123;</div><div class="line">                 computed : -Infinity</div><div class="line">             &#125;;</div><div class="line">             // 迭代集合中的元素</div><div class="line">             each(obj, function(value, index, list) &#123;</div><div class="line">                 // 如果指定了处理器参数, 则比较的数据为处理器返回的值, 否则直接使用each遍历时的默认值</div><div class="line">                 var computed = iterator ? iterator.call(context, value, index, list) : value;</div><div class="line">                 // 如果比较值相比上一个值要大, 则将当前值放入result.value</div><div class="line">                 computed &gt;= result.computed &amp;&amp; ( result = &#123;</div><div class="line">                     value : value,</div><div class="line">                     computed : computed</div><div class="line">                 &#125;);</div><div class="line">             &#125;);</div><div class="line">             // 返回最大值</div><div class="line">             return result.value;</div><div class="line">         &#125;;</div><div class="line">         // 返回集合中的最小值, 处理过程与max方法一致</div><div class="line">         _.min = function(obj, iterator, context) &#123;</div><div class="line">             if(!iterator &amp;&amp; _.isArray(obj) &amp;&amp; obj[0] === +obj[0])</div><div class="line">                 return Math.min.apply(Math, obj);</div><div class="line">             if(!iterator &amp;&amp; _.isEmpty(obj))</div><div class="line">                 return Infinity;</div><div class="line">             var result = &#123;</div><div class="line">                 computed : Infinity</div><div class="line">             &#125;;</div><div class="line">             each(obj, function(value, index, list) &#123;</div><div class="line">                 var computed = iterator ? iterator.call(context, value, index, list) : value;</div><div class="line">                 computed &lt; result.computed &amp;&amp; ( result = &#123;</div><div class="line">                     value : value,</div><div class="line">                     computed : computed</div><div class="line">                 &#125;);</div><div class="line">             &#125;);</div><div class="line">             return result.value;</div><div class="line">         &#125;;</div><div class="line">         // 通过随机数, 让数组无须排列</div><div class="line">         _.shuffle = function(obj) &#123;</div><div class="line">             // shuffled变量存储处理过程及最终的结果数据</div><div class="line">             var shuffled = [], rand;</div><div class="line">             // 迭代集合中的元素</div><div class="line">             each(obj, function(value, index, list) &#123;</div><div class="line">                 // 生成一个随机数, 随机数在&lt;0-当前已处理的数量&gt;之间</div><div class="line">                 rand = Math.floor(Math.random() * (index + 1));</div><div class="line">                 // 将已经随机得到的元素放到shuffled数组末尾</div><div class="line">                 shuffled[index] = shuffled[rand];</div><div class="line">                 // 在前面得到的随机数的位置插入最新值</div><div class="line">                 shuffled[rand] = value;</div><div class="line">             &#125;);</div><div class="line">             // 返回一个数组, 该数组中存储了经过随机混排的集合元素</div><div class="line">             return shuffled;</div><div class="line">         &#125;;</div><div class="line">         // 对集合中元素, 按照特定的字段或值进行排列</div><div class="line">         // 相比Array.prototype.sort方法, sortBy方法支持对对象排序</div><div class="line">         _.sortBy = function(obj, val, context) &#123;</div><div class="line">             // val应该是对象的一个属性, 或一个处理器函数, 如果是一个处理器, 则应该返回需要进行比较的数据</div><div class="line">             var iterator = _.isFunction(val) ? val : function(obj) &#123;</div><div class="line">                 return obj[val];</div><div class="line">             &#125;;</div><div class="line">             // 调用顺序: _.pluck(_.map().sort());</div><div class="line">             // 调用_.map()方法遍历集合, 并将集合中的元素放到value节点, 将元素中需要进行比较的数据放到criteria属性中</div><div class="line">             // 调用sort()方法将集合中的元素按照criteria属性中的数据进行顺序排序</div><div class="line">             // 调用pluck获取排序后的对象集合并返回</div><div class="line">             return _.pluck(_.map(obj, function(value, index, list) &#123;</div><div class="line">                 return &#123;</div><div class="line">                     value : value,</div><div class="line">                     criteria : iterator.call(context, value, index, list)</div><div class="line">                 &#125;;</div><div class="line">             &#125;).sort(function(left, right) &#123;</div><div class="line">                 var a = left.criteria, b = right.criteria;</div><div class="line">                 if(a ===</div><div class="line">                     void 0)</div><div class="line">                     return 1;</div><div class="line">                 if(b ===</div><div class="line">                     void 0)</div><div class="line">                     return -1;</div><div class="line">                 return a &lt; b ? -1 : a &gt; b ? 1 : 0;</div><div class="line">             &#125;), 'value');</div><div class="line">         &#125;;</div><div class="line">         // 将集合中的元素, 按处理器返回的key分为多个数组</div><div class="line">         _.groupBy = function(obj, val) &#123;</div><div class="line">             var result = &#123;&#125;;</div><div class="line">             // val将被转换为进行分组的处理器函数, 如果val不是一个Function类型的数据, 则将被作为筛选元素时的key值</div><div class="line">             var iterator = _.isFunction(val) ? val : function(obj) &#123;</div><div class="line">                 return obj[val];</div><div class="line">             &#125;;</div><div class="line">             // 迭代集合中的元素</div><div class="line">             each(obj, function(value, index) &#123;</div><div class="line">                 // 将处理器的返回值作为key, 并将相同的key元素放到一个新的数组</div><div class="line">                 var key = iterator(value, index);</div><div class="line">                 (result[key] || (result[key] = [])).push(value);</div><div class="line">             &#125;);</div><div class="line">             // 返回已分组的数据</div><div class="line">             return result;</div><div class="line">         &#125;;</div><div class="line">         _.sortedIndex = function(array, obj, iterator) &#123;</div><div class="line">             iterator || ( iterator = _.identity);</div><div class="line">             var low = 0, high = array.length;</div><div class="line">             while(low &lt; high) &#123;</div><div class="line">                 var mid = (low + high) &gt;&gt; 1;</div><div class="line">                 iterator(array[mid]) &lt; iterator(obj) ? low = mid + 1 : high = mid;</div><div class="line">             &#125;</div><div class="line">             return low;</div><div class="line">         &#125;;</div><div class="line">         // 将一个集合转换一个数组并返回</div><div class="line">         // 一般用于将arguments转换为数组, 或将对象无序集合转换为数据形式的有序集合</div><div class="line">         _.toArray = function(obj) &#123;</div><div class="line">             if(!obj)</div><div class="line">                 return [];</div><div class="line">             if(_.isArray(obj))</div><div class="line">                 return slice.call(obj);</div><div class="line">             // 将arguments转换为数组</div><div class="line">             if(_.isArguments(obj))</div><div class="line">                 return slice.call(obj);</div><div class="line">             if(obj.toArray &amp;&amp; _.isFunction(obj.toArray))</div><div class="line">                 return obj.toArray();</div><div class="line">             // 将对象转换为数组, 数组中包含对象中所有属性的值列表(不包含对象原型链中的属性)</div><div class="line">             return _.values(obj);</div><div class="line">         &#125;;</div><div class="line">         // 计算集合中元素的数量</div><div class="line">         _.size = function(obj) &#123;</div><div class="line">             // 如果集合是一个数组, 则计算数组元素数量</div><div class="line">             // 如果集合是一个对象, 则计算对象中的属性数量(不包含对象原型链中的属性)</div><div class="line">             return _.isArray(obj) ? obj.length : _.keys(obj).length;</div><div class="line">         &#125;;</div><div class="line">         // 数组相关的方法</div><div class="line">         // ---------------</div><div class="line"></div><div class="line">         // 返回一个数组的第一个或順序指定的n个元素</div><div class="line">         _.first = _.head = _.take = function(array, n, guard) &#123;</div><div class="line">             // 如果没有指定参数n, 则返回第一个元素</div><div class="line">             // 如果指定了n, 则返回一个新的数组, 包含顺序指定数量n个元素</div><div class="line">             // guard参数用于确定只返回第一个元素, 当guard为true时, 指定数量n无效</div><div class="line">             return (n != null) &amp;&amp; !guard ? slice.call(array, 0, n) : array[0];</div><div class="line">         &#125;;</div><div class="line">         // 返回一个新数组, 包含除第一个元素外的其它元素, 或排除从最后一个元素开始向前指定n个元素</div><div class="line">         // 与first方法不同在于, first确定需要的元素在数组之前的位置, initial确定能排除的元素在数组最后的位置</div><div class="line">         _.initial = function(array, n, guard) &#123;</div><div class="line">             // 如果没有传递参数n, 则默认返回除最后一个元素外的其它元素</div><div class="line">             // 如果传递参数n, 则返回从最后一个元素开始向前的n个元素外的其它元素</div><div class="line">             // guard用于确定只返回一个元素, 当guard为true时, 指定数量n无效</div><div class="line">             return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));</div><div class="line">         &#125;;</div><div class="line">         // 返回数组的最后一个或倒序指定的n个元素</div><div class="line">         _.last = function(array, n, guard) &#123;</div><div class="line">             if((n != null) &amp;&amp; !guard) &#123;</div><div class="line">                 // 计算并指定获取的元素位置n, 直到数组末尾, 作为一个新的数组返回</div><div class="line">                 return slice.call(array, Math.max(array.length - n, 0));</div><div class="line">             &#125; else &#123;</div><div class="line">                 // 如果没有指定数量, 或guard为true时, 只返回最后一个元素</div><div class="line">                 return array[array.length - 1];</div><div class="line">             &#125;</div><div class="line">         &#125;;</div><div class="line">         // 获取除了第一个或指定前n个元素外的其它元素</div><div class="line">         _.rest = _.tail = function(array, index, guard) &#123;</div><div class="line">             // 计算slice的第二个位置参数, 直到数组末尾</div><div class="line">             // 如果没有指定index, 或guard值为true, 则返回除第一个元素外的其它元素</div><div class="line">             // (index == null)值为true时, 作为参数传递给slice函数将被自动转换为1</div><div class="line">             return slice.call(array, (index == null) || guard ? 1 : index);</div><div class="line">         &#125;;</div><div class="line">         // 返回数组中所有值能被转换为true的元素, 返回一个新的数组</div><div class="line">         // 不能被转换的值包括 false, 0, '', null, undefined, NaN, 这些值将被转换为false</div><div class="line">         _.compact = function(array) &#123;</div><div class="line">             return _.filter(array, function(value) &#123;</div><div class="line">                 return !!value;</div><div class="line">             &#125;);</div><div class="line">         &#125;;</div><div class="line">         // 将一个多维数组合成为一维数组, 支持深层合并</div><div class="line">         // shallow参数用于控制合并深度, 当shallow为true时, 只合并第一层, 默认进行深层合并</div><div class="line">         _.flatten = function(array, shallow) &#123;</div><div class="line">             // 迭代数组中的每一个元素, 并将返回值作为demo传递给下一次迭代</div><div class="line">             return _.reduce(array, function(memo, value) &#123;</div><div class="line">                 // 如果元素依然是一个数组, 进行以下判断:</div><div class="line">                 // - 如果不进行深层合并, 则使用Array.prototype.concat将当前数组和之前的数据进行连接</div><div class="line">                 // - 如果支持深层合并, 则迭代调用flatten方法, 直到底层元素不再是数组类型</div><div class="line">                 if(_.isArray(value))</div><div class="line">                     return memo.concat( shallow ? value : _.flatten(value));</div><div class="line">                 // 数据(value)已经处于底层, 不再是数组类型, 则将数据合并到memo中并返回</div><div class="line">                 memo[memo.length] = value;</div><div class="line">                 return memo;</div><div class="line">             &#125;, []);</div><div class="line">         &#125;;</div><div class="line">         // 筛选并返回当前数组中与指定数据不相等的差异数据(可参考difference方法注释)</div><div class="line">         _.without = function(array) &#123;</div><div class="line">             return _.difference(array, slice.call(arguments, 1));</div><div class="line">         &#125;;</div><div class="line">         // 对数组中的数据进行去重(使用===进行比较)</div><div class="line">         // 当isSorted参数不为false时, 将依次对数组中的元素调用include方法, 检查相同元素是否已经被添加到返回值(数组)中</div><div class="line">         // 如果调用之前确保数组中数据按顺序排列, 则可以将isSorted设为true, 它将通过与最后一个元素进行对比来排除相同值, 使用isSorted效率会高于默认的include方式</div><div class="line">         // uniq方法默认将以数组中的数据进行对比, 如果声明iterator处理器, 则会根据处理器创建一个对比数组, 比较时以该数组中的数据为准, 但最终返回的唯一数据仍然是原始数组</div><div class="line">         _.uniq = _.unique = function(array, isSorted, iterator) &#123;</div><div class="line">             // 如果使用了iterator处理器, 则先将当前数组中的数据会先经过按迭代器处理, 并返回一个处理后的新数组</div><div class="line">             // 新数组用于作为比较的基准</div><div class="line">             var initial = iterator ? _.map(array, iterator) : array;</div><div class="line">             // 用于记录处理结果的临时数组</div><div class="line">             var results = [];</div><div class="line">             // 如果数组中只有2个值, 则不需要使用include方法进行比较, 将isSorted设置为true能提高运行效率</div><div class="line">             if(array.length &lt; 3)</div><div class="line">                 isSorted = true;</div><div class="line">             // 使用reduce方法迭代并累加处理结果</div><div class="line">             // initial变量是需要进行比较的基准数据, 它可能是原始数组, 也可能是处理器的结果集合(如果设置过iterator)</div><div class="line">             _.reduce(initial, function(memo, value, index) &#123;</div><div class="line">                 // 如果isSorted参数为true, 则直接使用===比较记录中的最后一个数据</div><div class="line">                 // 如果isSorted参数为false, 则使用include方法与集合中的每一个数据进行对比</div><div class="line">                 if( isSorted ? _.last(memo) !== value || !memo.length : !_.include(memo, value)) &#123;</div><div class="line">                     // memo记录了已经比较过的无重复数据</div><div class="line">                     // 根据iterator参数的状态, memo中记录的数据可能是原始数据, 也可能是处理器处理后的数据</div><div class="line">                     memo.push(value);</div><div class="line">                     // 处理结果数组中保存的始终为原始数组中的数据</div><div class="line">                     results.push(array[index]);</div><div class="line">                 &#125;</div><div class="line">                 return memo;</div><div class="line">             &#125;, []);</div><div class="line">             // 返回处理结果, 它只包含数组中无重复的数据</div><div class="line">             return results;</div><div class="line">         &#125;;</div><div class="line">         // union方法与uniq方法作用一致, 不同之处在于union允许在参数中传入多个数组</div><div class="line">         _.union = function() &#123;</div><div class="line">             // union对参数中的多个数组进行浅层合并为一个数组对象传递给uniq方法进行处理</div><div class="line">             return _.uniq(_.flatten(arguments, true));</div><div class="line">         &#125;;</div><div class="line">         // 获取当前数组与其它一个或多个数组的交集元素</div><div class="line">         // 从第二个参数开始为需要进行比较的一个或多个数组</div><div class="line">         _.intersection = _.intersect = function(array) &#123;</div><div class="line">             // rest变量记录需要进行比较的其它数组对象</div><div class="line">             var rest = slice.call(arguments, 1);</div><div class="line">             // 使用uniq方法去除当前数组中的重复数据, 避免重复计算</div><div class="line">             // 对当前数组的数据通过处理器进行过滤, 并返回符合条件(比较相同元素)的数据</div><div class="line">             return _.filter(_.uniq(array), function(item) &#123;</div><div class="line">                 // 使用every方法验证每一个数组中都包含了需要对比的数据</div><div class="line">                 // 如果所有数组中均包含对比数据, 则全部返回true, 如果任意一个数组没有包含该元素, 则返回false</div><div class="line">                 return _.every(rest, function(other) &#123;</div><div class="line">                     // other参数存储了每一个需要进行对比的数组</div><div class="line">                     // item存储了当前数组中需要进行对比的数据</div><div class="line">                     // 使用indexOf方法搜索数组中是否存在该元素(可参考indexOf方法注释)</div><div class="line">                     return _.indexOf(other, item) &gt;= 0;</div><div class="line">                 &#125;);</div><div class="line">             &#125;);</div><div class="line">         &#125;;</div><div class="line">         // 筛选并返回当前数组中与指定数据不相等的差异数据</div><div class="line">         // 该函数一般用于删除数组中指定的数据, 并得到删除后的新数组</div><div class="line">         // 该方法的作用与without相等, without方法参数形式上不允许数据被包含在数组中, 而difference方法参数形式上建议是数组(也可以和without使用相同形式的参数)</div><div class="line">         _.difference = function(array) &#123;</div><div class="line">             // 对第2个参数开始的所有参数, 作为一个数组进行合并(仅合并第一层, 而并非深层合并)</div><div class="line">             // rest变量存储验证数据, 在本方法中用于与原数据对比</div><div class="line">             var rest = _.flatten(slice.call(arguments, 1), true);</div><div class="line">             // 对合并后的数组数据进行过滤, 过滤条件是当前数组中不包含参数指定的验证数据的内容</div><div class="line">             // 将符合过滤条件的数据组合为一个新的数组并返回</div><div class="line">             return _.filter(array, function(value) &#123;</div><div class="line">                 return !_.include(rest, value);</div><div class="line">             &#125;);</div><div class="line">         &#125;;</div><div class="line">         // 将每个数组的相同位置的数据作为一个新的二维数组返回, 返回的数组长度以传入参数中最大的数组长度为准, 其它数组的空白位置使用undefined填充</div><div class="line">         // zip方法应该包含多个参数, 且每个参数应该均为数组</div><div class="line">         _.zip = function() &#123;</div><div class="line">             // 将参数转换为数组, 此时args是一个二维数组</div><div class="line">             var args = slice.call(arguments);</div><div class="line">             // 计算每一个数组的长度, 并返回其中最大长度值</div><div class="line">             var length = _.max(_.pluck(args, 'length'));</div><div class="line">             // 依照最大长度值创建一个新的空数组, 该数组用于存储处理结果</div><div class="line">             var results = new Array(length);</div><div class="line">             // 循环最大长度, 在每次循环将调用pluck方法获取每个数组中相同位置的数据(依次从0到最后位置)</div><div class="line">             // 将获取到的数据存储在一个新的数组, 放入results并返回</div><div class="line">             for(var i = 0; i &lt; length; i++)</div><div class="line">             results[i] = _.pluck(args, "" + i);</div><div class="line">             // 返回的结果是一个二维数组</div><div class="line">             return results;</div><div class="line">         &#125;;</div><div class="line">         // 搜索一个元素在数组中首次出现的位置, 如果元素不存在则返回 -1</div><div class="line">         // 搜索时使用 === 对元素进行匹配</div><div class="line">         _.indexOf = function(array, item, isSorted) &#123;</div><div class="line">             if(array == null)</div><div class="line">                 return -1;</div><div class="line">             var i, l;</div><div class="line">             if(isSorted) &#123;</div><div class="line">                 i = _.sortedIndex(array, item);</div><div class="line">                 return array[i] === item ? i : -1;</div><div class="line">             &#125;</div><div class="line">             // 优先调用宿主环境提供的indexOf方法</div><div class="line">             if(nativeIndexOf &amp;&amp; array.indexOf === nativeIndexOf)</div><div class="line">                 return array.indexOf(item);</div><div class="line">             // 循环并返回元素首次出现的位置</div><div class="line">             for( i = 0, l = array.length; i &lt; l; i++)</div><div class="line">             if( i in array &amp;&amp; array[i] === item)</div><div class="line">                 return i;</div><div class="line">             // 没有找到元素, 返回-1</div><div class="line">             return -1;</div><div class="line">         &#125;;</div><div class="line">         // 返回一个元素在数组中最后一次出现的位置, 如果元素不存在则返回 -1</div><div class="line">         // 搜索时使用 === 对元素进行匹配</div><div class="line">         _.lastIndexOf = function(array, item) &#123;</div><div class="line">             if(array == null)</div><div class="line">                 return -1;</div><div class="line">             // 优先调用宿主环境提供的lastIndexOf方法</div><div class="line">             if(nativeLastIndexOf &amp;&amp; array.lastIndexOf === nativeLastIndexOf)</div><div class="line">                 return array.lastIndexOf(item);</div><div class="line">             var i = array.length;</div><div class="line">             // 循环并返回元素最后出现的位置</div><div class="line">             while(i--)</div><div class="line">             if( i in array &amp;&amp; array[i] === item)</div><div class="line">                 return i;</div><div class="line">             // 没有找到元素, 返回-1</div><div class="line">             return -1;</div><div class="line">         &#125;;</div><div class="line">         // 根据区间和步长, 生成一系列整数, 并作为数组返回</div><div class="line">         // start参数表示最小数</div><div class="line">         // stop参数表示最大数</div><div class="line">         // step参数表示生成多个数值之间的步长值</div><div class="line">         _.range = function(start, stop, step) &#123;</div><div class="line">             // 参数控制</div><div class="line">             if(arguments.length &lt;= 1) &#123;</div><div class="line">                 // 如果没有参数, 则start = 0, stop = 0, 在循环中不会生成任何数据, 将返回一个空数组</div><div class="line">                 // 如果有1个参数, 则参数指定给stop, start = 0</div><div class="line">                 stop = start || 0;</div><div class="line">                 start = 0;</div><div class="line">             &#125;</div><div class="line">             // 生成整数的步长值, 默认为1</div><div class="line">             step = arguments[2] || 1;</div><div class="line"></div><div class="line">             // 根据区间和步长计算将生成的最大值</div><div class="line">             var len = Math.max(Math.ceil((stop - start) / step), 0);</div><div class="line">             var idx = 0;</div><div class="line">             var range = new Array(len);</div><div class="line"></div><div class="line">             // 生成整数列表, 并存储到range数组</div><div class="line">             while(idx &lt; len) &#123;</div><div class="line">                 range[idx++] = start;</div><div class="line">                 start += step;</div><div class="line">             &#125;</div><div class="line"></div><div class="line">             // 返回列表结果</div><div class="line">             return range;</div><div class="line">         &#125;;</div><div class="line">         // 函数相关方法</div><div class="line">         // ------------------</div><div class="line"></div><div class="line">         // 创建一个用于设置prototype的公共函数对象</div><div class="line">         var ctor = function() &#123;</div><div class="line">         &#125;;</div><div class="line">         // 为一个函数绑定执行上下文, 任何情况下调用该函数, 函数中的this均指向context对象</div><div class="line">         // 绑定函数时, 可以同时给函数传递调用形参</div><div class="line">         _.bind = function bind(func, context) &#123;</div><div class="line">             var bound, args;</div><div class="line">             // 优先调用宿主环境提供的bind方法</div><div class="line">             if(func.bind === nativeBind &amp;&amp; nativeBind)</div><div class="line">                 return nativeBind.apply(func, slice.call(arguments, 1));</div><div class="line">             // func参数必须是一个函数(Function)类型</div><div class="line">             if(!_.isFunction(func))</div><div class="line">                 throw new TypeError;</div><div class="line">             // args变量存储了bind方法第三个开始的参数列表, 每次调用时都将传递给func函数</div><div class="line">             args = slice.call(arguments, 2);</div><div class="line">             return bound = function() &#123;</div><div class="line">                 if(!(this instanceof bound))</div><div class="line">                     return func.apply(context, sargs.concat(slice.call(arguments)));</div><div class="line">                 ctor.prototype = func.prototype;</div><div class="line">                 var self = new ctor;</div><div class="line">                 var result = func.apply(self, args.concat(slice.call(arguments)));</div><div class="line">                 if(Object(result) === result)</div><div class="line">                     return result;</div><div class="line">                 return self;</div><div class="line">             &#125;;</div><div class="line">         &#125;;</div><div class="line">         // 将指定的函数, 或对象本身的所有函数上下本绑定到对象本身, 被绑定的函数在被调用时, 上下文对象始终指向对象本身</div><div class="line">         // 该方法一般在处理对象事件时使用, 例如:</div><div class="line">         // _(obj).bindAll(); // 或_(obj).bindAll('handlerClick');</div><div class="line">         // document.addEventListener('click', obj.handlerClick);</div><div class="line">         // 在handlerClick方法中, 上下文依然是obj对象</div><div class="line">         _.bindAll = function(obj) &#123;</div><div class="line">             // 第二个参数开始表示需要绑定的函数名称</div><div class="line">             var funcs = slice.call(arguments, 1);</div><div class="line">             // 如果没有指定特定的函数名称, 则默认绑定对象本身所有类型为Function的属性</div><div class="line">             if(funcs.length == 0)</div><div class="line">                 funcs = _.functions(obj);</div><div class="line">             // 循环并将所有的函数上下本设置为obj对象本身</div><div class="line">             // each方法本身不会遍历对象原型链中的方法, 但此处的funcs列表是通过_.functions方法获取的, 它已经包含了原型链中的方法</div><div class="line">             each(funcs, function(f) &#123;</div><div class="line">                 obj[f] = _.bind(obj[f], obj);</div><div class="line">             &#125;);</div><div class="line">             return obj;</div><div class="line">         &#125;;</div><div class="line">         // memoize方法将返回一个函数, 该函数集成了缓存功能, 将经过计算的值缓存到局部变量并在下次调用时直接返回</div><div class="line">         // 如果计算结果是一个庞大的对象或数据, 使用时应该考虑内存占用情况</div><div class="line">         _.memoize = function(func, hasher) &#123;</div><div class="line">             // 用于存储缓存结果的memo对象</div><div class="line">             var memo = &#123;&#125;;</div><div class="line">             // hasher参数应该是一个function, 它用于返回一个key, 该key作为读取缓存的标识</div><div class="line">             // 如果没有指定key, 则默认使用函数的第一个参数作为key, 如果函数的第一个参数是复合数据类型, 可能会返回类似[Object object]的key, 这个key可能会造成后续计算的数据不正确</div><div class="line">             hasher || ( hasher = _.identity);</div><div class="line">             // 返回一个函数, 该函数首先通过检查缓存, 再对没有缓存过的数据进行调用</div><div class="line">             return function() &#123;</div><div class="line">                 var key = hasher.apply(this, arguments);</div><div class="line">                 return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));</div><div class="line">             &#125;;</div><div class="line">         &#125;;</div><div class="line">         // 延时执行一个函数</div><div class="line">         // wait单位为ms, 第3个参数开始将被依次传递给执行函数</div><div class="line">         _.delay = function(func, wait) &#123;</div><div class="line">             var args = slice.call(arguments, 2);</div><div class="line">             return setTimeout(function() &#123;</div><div class="line">                 return func.apply(null, args);</div><div class="line">             &#125;, wait);</div><div class="line">         &#125;;</div><div class="line">         // 延迟执行函数</div><div class="line">         // JavaScript中的setTimeout会被放到一个单独的函数堆栈中执行, 执行时间是在当前堆栈中调用的函数都被执行完毕之后</div><div class="line">         // defer设置函数在1ms后执行, 目的是将func函数放到单独的堆栈中, 等待当前函数执行完成后再执行</div><div class="line">         // defer方法一般用于处理DOM操作的优先级, 实现正确的逻辑流程和更流畅的交互体验</div><div class="line">         _.defer = function(func) &#123;</div><div class="line">             return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));</div><div class="line">         &#125;;</div><div class="line">         // 函数节流方法, throttle方法主要用于控制函数的执行频率, 在被控制的时间间隔内, 频繁调用函数不会被多次执行</div><div class="line">         // 在时间间隔内如果多次调用了函数, 时间隔截止时会自动调用一次, 不需要等到时间截止后再手动调用(自动调用时不会有返回值)</div><div class="line">         // throttle函数一般用于处理复杂和调用频繁的函数, 通过节流控制函数的调用频率, 节省处理资源</div><div class="line">         // 例如window.onresize绑定的事件函数, 或element.onmousemove绑定的事件函数, 可以用throttle进行包装</div><div class="line">         // throttle方法返回一个函数, 该函数会自动调用func并进行节流控制</div><div class="line">         _.throttle = function(func, wait) &#123;</div><div class="line">             var context, args, timeout, throttling, more, result;</div><div class="line">             // whenDone变量调用了debounce方法, 因此在多次连续调用函数时, 最后一次调用会覆盖之前调用的定时器, 清除状态函数也仅会被执行一次</div><div class="line">             // whenDone函数在最后一次函数执行的时间间隔截止时调用, 清除节流和调用过程中记录的一些状态</div><div class="line">             var whenDone = _.debounce(function() &#123;</div><div class="line">                 more = throttling = false;</div><div class="line">             &#125;, wait);</div><div class="line">             // 返回一个函数, 并在函数内进行节流控制</div><div class="line">             return function() &#123;</div><div class="line">                 // 保存函数的执行上下文和参数</div><div class="line">                 context = this;</div><div class="line">                 args = arguments;</div><div class="line">                 // later函数在上一次函数调用时间间隔截止时执行</div><div class="line">                 var later = function() &#123;</div><div class="line">                     // 清除timeout句柄, 方便下一次函数调用</div><div class="line">                     timeout = null;</div><div class="line">                     // more记录了在上一次调用至时间间隔截止之间, 是否重复调用了函数</div><div class="line">                     // 如果重复调用了函数, 在时间间隔截止时将自动再次调用函数</div><div class="line">                     if(more)</div><div class="line">                         func.apply(context, args);</div><div class="line">                     // 调用whenDone, 用于在时间间隔后清除节流状态</div><div class="line">                     whenDone();</div><div class="line">                 &#125;;</div><div class="line">                 // timeout记录了上一次函数执行的时间间隔句柄</div><div class="line">                 // timeout时间间隔截止时调用later函数, later中将清除timeout, 并检查是否需要再次调用函数</div><div class="line">                 if(!timeout)</div><div class="line">                     timeout = setTimeout(later, wait);</div><div class="line">                 // throttling变量记录上次调用的时间间隔是否已经结束, 即是否处于节流过程中</div><div class="line">                 // throttling在每次函数调用时设为true, 表示需要进行节流, 在时间间隔截止时设置为false(在whenDone函数中实现)</div><div class="line">                 if(throttling) &#123;</div><div class="line">                     // 节流过程中进行了多次调用, 在more中记录一个状态, 表示在时间间隔截止时需要再次自动调用函数</div><div class="line">                     more = true;</div><div class="line">                 &#125; else &#123;</div><div class="line">                     // 没有处于节流过程, 可能是第一次调用函数, 或已经超过上一次调用的间隔, 可以直接调用函数</div><div class="line">                     result = func.apply(context, args);</div><div class="line">                 &#125;</div><div class="line">                 // 调用whenDone, 用于在时间间隔后清除节流状态</div><div class="line">                 whenDone();</div><div class="line">                 // throttling变量记录函数调用时的节流状态</div><div class="line">                 throttling = true;</div><div class="line">                 // 返回调用结果</div><div class="line">                 return result;</div><div class="line">             &#125;;</div><div class="line">         &#125;;</div><div class="line">         // debounce与throttle方法类似, 用于函数节流, 它们的不同之处在于:</div><div class="line">         // -- throttle关注函数的执行频率, 在指定频率内函数只会被执行一次;</div><div class="line">         // -- debounce函数更关注函数执行的间隔, 即函数两次的调用时间不能小于指定时间;</div><div class="line">         // 如果两次函数的执行间隔小于wait, 定时器会被清除并重新创建, 这意味着连续频繁地调用函数, 函数一直不会被执行, 直到某一次调用与上一次调用的时间不小于wait毫秒</div><div class="line">         // debounce函数一般用于控制需要一段时间之后才能执行的操作, 例如在用户输入完毕200ms后提示用户, 可以使用debounce包装一个函数, 绑定到onkeyup事件</div><div class="line">         // ----------------------------------------------------------------</div><div class="line">         // @param &#123;Function&#125; func 表示被执行的函数</div><div class="line">         // @param &#123;Number&#125; wait 表示允许的时间间隔, 在该时间范围内重复调用会被重新推迟wait毫秒</div><div class="line">         // @param &#123;Boolean&#125; immediate 表示函数调用后是否立即执行, true为立即调用, false为在时间截止时调用</div><div class="line">         // debounce方法返回一个函数, 该函数会自动调用func并进行节流控制</div><div class="line">         _.debounce = function(func, wait, immediate) &#123;</div><div class="line">             // timeout用于记录函数上一次调用的执行状态(定时器句柄)</div><div class="line">             // 当timeout为null时, 表示上一次调用已经结束</div><div class="line">             var timeout;</div><div class="line">             // 返回一个函数, 并在函数内进行节流控制</div><div class="line">             return function() &#123;</div><div class="line">                 // 保持函数的上下文对象和参数</div><div class="line">                 var context = this, args = arguments;</div><div class="line">                 var later = function() &#123;</div><div class="line">                     // 设置timeout为null</div><div class="line">                     // later函数会在允许的时间截止时被调用</div><div class="line">                     // 调用该函数时, 表明上一次函数执行时间已经超过了约定的时间间隔, 此时之后再进行调用都是被允许的</div><div class="line">                     timeout = null;</div><div class="line">                     if(!immediate)</div><div class="line">                         func.apply(context, args);</div><div class="line">                 &#125;;</div><div class="line">                 // 如果函数被设定为立即执行, 且上一次调用的时间间隔已经过去, 则立即调用函数</div><div class="line">                 if(immediate &amp;&amp; !timeout)</div><div class="line">                     func.apply(context, args);</div><div class="line">                 // 创建一个定时器用于检查和设置函数的调用状态</div><div class="line">                 // 创建定时器之前先清空上一次setTimeout句柄, 无论上一次绑定的函数是否已经被执行</div><div class="line">                 // 如果本次函数在调用时, 上一次函数执行还没有开始(一般是immediate设置为false时), 则函数的执行时间会被推迟, 因此timeout句柄会被重新创建</div><div class="line">                 clearTimeout(timeout);</div><div class="line">                 // 在允许的时间截止时调用later函数</div><div class="line">                 timeout = setTimeout(later, wait);</div><div class="line">             &#125;;</div><div class="line">         &#125;;</div><div class="line">         // 创建一个只会被执行一次的函数, 如果该函数被重复调用, 将返回第一次执行的结果</div><div class="line">         // 该函数用于获取和计算固定数据的逻辑, 如获取用户所用的浏览器类型</div><div class="line">         _.once = function(func) &#123;</div><div class="line">             // ran记录函数是否被执行过</div><div class="line">             // memo记录函数最后一次执行的结果</div><div class="line">             var ran = false, memo;</div><div class="line">             return function() &#123;</div><div class="line">                 // 如果函数已被执行过, 则直接返回第一次执行的结果</div><div class="line">                 if(ran)</div><div class="line">                     return memo;</div><div class="line">                 ran = true;</div><div class="line">                 return memo = func.apply(this, arguments);</div><div class="line">             &#125;;</div><div class="line">         &#125;;</div><div class="line">         // 返回一个函数, 该函数会将当前函数作为参数传递给一个包裹函数</div><div class="line">         // 在包裹函数中可以通过第一个参数调用当前函数, 并返回结果</div><div class="line">         // 一般用于多个流程处理函数的低耦合组合调用</div><div class="line">         _.wrap = function(func, wrapper) &#123;</div><div class="line">             return function() &#123;</div><div class="line">                 // 将当前函数作为第一个参数, 传递给wrapper函数</div><div class="line">                 var args = [func].concat(slice.call(arguments, 0));</div><div class="line">                 // 返回wrapper函数的处理结果</div><div class="line">                 return wrapper.apply(this, args);</div><div class="line">             &#125;;</div><div class="line">         &#125;;</div><div class="line">         // 将多个函数组合到一起, 按照参数传递的顺序, 后一个函数的返回值会被一次作为参数传递给前一个函数作为参数继续处理</div><div class="line">         // _.compose(A, B, C); 等同于 A(B(C()));</div><div class="line">         // 该方法的缺点在于被关联的函数处理的参数数量只能有一个, 如果需要传递多个参数, 可以通过Array或Object复合数据类型进行组装</div><div class="line">         _.compose = function() &#123;</div><div class="line">             // 获取函数列表, 所有参数需均为Function类型</div><div class="line">             var funcs = arguments;</div><div class="line">             // 返回一个供调用的函数句柄</div><div class="line">             return function() &#123;</div><div class="line">                 // 从后向前依次执行函数, 并将记录的返回值作为参数传递给前一个函数继续处理</div><div class="line">                 var args = arguments;</div><div class="line">                 for(var i = funcs.length - 1; i &gt;= 0; i--) &#123;</div><div class="line">                     args = [funcs[i].apply(this, args)];</div><div class="line">                 &#125;</div><div class="line">                 // 返回最后一次调用函数的返回值</div><div class="line">                 return args[0];</div><div class="line">             &#125;;</div><div class="line">         &#125;;</div><div class="line">         // 返回一个函数, 该函数作为调用计数器, 当该函数被调用times次(或超过times次)后, func函数将被执行</div><div class="line">         // after方法一般用作异步的计数器, 例如在多个AJAX请求全部完成后需要执行一个函数, 则可以使用after在每个AJAX请求完成后调用</div><div class="line">         _.after = function(times, func) &#123;</div><div class="line">             // 如果没有指定或指定无效次数, 则func被直接调用</div><div class="line">             if(times &lt;= 0)</div><div class="line">                 return func();</div><div class="line">             // 返回一个计数器函数</div><div class="line">             return function() &#123;</div><div class="line">                 // 每次调用计数器函数times减1, 调用times次之后执行func函数并返回func函数的返回值</div><div class="line">                 if(--times &lt; 1) &#123;</div><div class="line">                     return func.apply(this, arguments);</div><div class="line">                 &#125;</div><div class="line">             &#125;;</div><div class="line">         &#125;;</div><div class="line">         // 对象相关方法</div><div class="line">         // ----------------</div><div class="line"></div><div class="line">         // 获取一个对象的属性名列表(不包含原型链中的属性)</div><div class="line">         _.keys = nativeKeys ||</div><div class="line">         function(obj) &#123;</div><div class="line">             if(obj !== Object(obj))</div><div class="line">                 throw new TypeError('Invalid object');</div><div class="line">             var keys = [];</div><div class="line">             // 记录并返回对象的所有属性名</div><div class="line">             for(var key in obj)</div><div class="line">             if(_.has(obj, key))</div><div class="line">                 keys[keys.length] = key;</div><div class="line">             return keys;</div><div class="line">         &#125;;</div><div class="line"></div><div class="line">         // 返回一个对象中所有属性的值列表(不包含原型链中的属性)</div><div class="line">         _.values = function(obj) &#123;</div><div class="line">             return _.map(obj, _.identity);</div><div class="line">         &#125;;</div><div class="line">         // 获取一个对象中所有属性值为Function类型的key列表, 并按key名进行排序(包含原型链中的属性)</div><div class="line">         _.functions = _.methods = function(obj) &#123;</div><div class="line">             var names = [];</div><div class="line">             for(var key in obj) &#123;</div><div class="line">                 if(_.isFunction(obj[key]))</div><div class="line">                     names.push(key);</div><div class="line">             &#125;</div><div class="line">             return names.sort();</div><div class="line">         &#125;;</div><div class="line">         // 将一个或多个对象的属性(包含原型链中的属性), 复制到obj对象, 如果存在同名属性则覆盖</div><div class="line">         _.extend = function(obj) &#123;</div><div class="line">             // each循环参数中的一个或多个对象</div><div class="line">             each(slice.call(arguments, 1), function(source) &#123;</div><div class="line">                 // 将对象中的全部属性复制或覆盖到obj对象</div><div class="line">                 for(var prop in source) &#123;</div><div class="line">                     obj[prop] = source[prop];</div><div class="line">                 &#125;</div><div class="line">             &#125;);</div><div class="line">             return obj;</div><div class="line">         &#125;;</div><div class="line">         // 返回一个新对象, 并从obj中复制指定的属性到新对象中</div><div class="line">         // 第2个参数开始为指定的需要复制的属性名(支持多个参数和深层数组)</div><div class="line">         _.pick = function(obj) &#123;</div><div class="line">             // 创建一个对象, 存放复制的指定属性</div><div class="line">             var result = &#123;&#125;;</div><div class="line">             // 从第二个参数开始合并为一个存放属性名列表的数组</div><div class="line">             each(_.flatten(slice.call(arguments, 1)), function(key) &#123;</div><div class="line">                 // 循环属性名列表, 如果obj中存在该属性, 则将其复制到result对象</div><div class="line">                 if( key in obj)</div><div class="line">                     result[key] = obj[key];</div><div class="line">             &#125;);</div><div class="line">             // 返回复制结果</div><div class="line">             return result;</div><div class="line">         &#125;;</div><div class="line">         // 将obj中不存在或转换为Boolean类型后值为false的属性, 从参数中指定的一个或多个对象中复制到obj</div><div class="line">         // 一般用于给对象指定默认值</div><div class="line">         _.defaults = function(obj) &#123;</div><div class="line">             // 从第二个参数开始可指定多个对象, 这些对象中的属性将被依次复制到obj对象中(如果obj对象中不存在该属性的话)</div><div class="line">             each(slice.call(arguments, 1), function(source) &#123;</div><div class="line">                 // 遍历每个对象中的所有属性</div><div class="line">                 for(var prop in source) &#123;</div><div class="line">                     // 如果obj中不存在或属性值转换为Boolean类型后值为false, 则将属性复制到obj中</div><div class="line">                     if(obj[prop] == null)</div><div class="line">                         obj[prop] = source[prop];</div><div class="line">                 &#125;</div><div class="line">             &#125;);</div><div class="line">             return obj;</div><div class="line">         &#125;;</div><div class="line">         // 创建一个obj的副本, 返回一个新的对象, 该对象包含obj中的所有属性和值的状态</div><div class="line">         // clone函数不支持深层复制, 例如obj中的某个属性存放着一个对象, 则该对象不会被复制</div><div class="line">         // 如果obj是一个数组, 则会创建一个相同的数组对象</div><div class="line">         _.clone = function(obj) &#123;</div><div class="line">             // 不支持非数组和对象类型的数据</div><div class="line">             if(!_.isObject(obj))</div><div class="line">                 return obj;</div><div class="line">             // 复制并返回数组或对象</div><div class="line">             return _.isArray(obj) ? obj.slice() : _.extend(&#123;&#125;, obj);</div><div class="line">         &#125;;</div><div class="line">         // 执行一个函数, 并将obj作为参数传递给该函数, 函数执行完毕后最终返回obj对象</div><div class="line">         // 一般在创建一个方法链的时候会使用tap方法, 例如:</div><div class="line">         // _(obj).chain().tap(click).tap(mouseover).tap(mouseout);</div><div class="line">         _.tap = function(obj, interceptor) &#123;</div><div class="line">             interceptor(obj);</div><div class="line">             return obj;</div><div class="line">         &#125;;</div><div class="line">         // eq函数只在isEqual方法中调用, 用于比较两个数据的值是否相等</div><div class="line">         // 与 === 不同在于, eq更关注数据的值</div><div class="line">         // 如果进行比较的是两个复合数据类型, 不仅仅比较是否来自同一个引用, 且会进行深层比较(对两个对象的结构和数据进行比较)</div><div class="line">         function eq(a, b, stack) &#123;</div><div class="line">             // 检查两个简单数据类型的值是否相等</div><div class="line">             // 对于复合数据类型, 如果它们来自同一个引用, 则认为其相等</div><div class="line">             // 如果被比较的值其中包含0, 则检查另一个值是否为-0, 因为 0 === -0 是成立的</div><div class="line">             // 而 1 / 0 == 1 / -0 是不成立的(1 / 0值为Infinity, 1 / -0值为-Infinity, 而Infinity不等于-Infinity)</div><div class="line">             if(a === b)</div><div class="line">                 return a !== 0 || 1 / a == 1 / b;</div><div class="line">             // 将数据转换为布尔类型后如果值为false, 将判断两个值的数据类型是否相等(因为null与undefined, false, 0, 空字符串, 在非严格比较下值是相等的)</div><div class="line">             if(a == null || b == null)</div><div class="line">                 return a === b;</div><div class="line">             // 如果进行比较的数据是一个Underscore封装的对象(具有_chain属性的对象被认为是Underscore对象)</div><div class="line">             // 则将对象解封后获取本身的数据(通过_wrapped访问), 然后再对本身的数据进行比较</div><div class="line">             // 它们的关系类似与一个jQuery封装的DOM对象, 和浏览器本身创建的DOM对象</div><div class="line">             if(a._chain)</div><div class="line">                 a = a._wrapped;</div><div class="line">             if(b._chain)</div><div class="line">                 b = b._wrapped;</div><div class="line">             // 如果对象提供了自定义的isEqual方法(此处的isEqual方法并非Undersocre对象的isEqual方法, 因为在上一步已经对Undersocre对象进行了解封)</div><div class="line">             // 则使用对象自定义的isEqual方法与另一个对象进行比较</div><div class="line">             if(a.isEqual &amp;&amp; _.isFunction(a.isEqual))</div><div class="line">                 return a.isEqual(b);</div><div class="line">             if(b.isEqual &amp;&amp; _.isFunction(b.isEqual))</div><div class="line">                 return b.isEqual(a);</div><div class="line">             // 对两个数据的数据类型进行验证</div><div class="line">             // 获取对象a的数据类型(通过Object.prototype.toString方法)</div><div class="line">             var className = toString.call(a);</div><div class="line">             // 如果对象a的数据类型与对象b不匹配, 则认为两个数据值也不匹配</div><div class="line">             if(className != toString.call(b))</div><div class="line">                 return false;</div><div class="line">             // 执行到此处, 可以确保需要比较的两个数据均为复合数据类型, 且数据类型相等</div><div class="line">             // 通过switch检查数据的数据类型, 针对不同数据类型进行不同的比较</div><div class="line">             // (此处不包括对数组和对象类型, 因为它们可能包含更深层次的数据, 将在后面进行深层比较)</div><div class="line">             switch (className) &#123;</div><div class="line">                 case '[object String]':</div><div class="line">                     // 如果被比较的是字符串类型(其中a的是通过new String()创建的字符串)</div><div class="line">                     // 则将B转换为String对象后进行匹配(这里匹配并非进行严格的数据类型检查, 因为它们并非来自同一个对象的引用)</div><div class="line">                     // 在调用 == 进行比较时, 会自动调用对象的toString()方法, 返回两个简单数据类型的字符串</div><div class="line">                     return a == String(b);</div><div class="line">                 case '[object Number]':</div><div class="line">                     // 通过+a将a转成一个Number, 如果a被转换之前与转换之后不相等, 则认为a是一个NaN类型</div><div class="line">                     // 因为NaN与NaN是不相等的, 因此当a值为NaN时, 无法简单地使用a == b进行匹配, 而是用相同的方法检查b是否为NaN(即 b != +b)</div><div class="line">                     // 当a值是一个非NaN的数据时, 则检查a是否为0, 因为当b为-0时, 0 === -0是成立的(实际上它们在逻辑上属于两个不同的数据)</div><div class="line">                     return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);</div><div class="line">                 case '[object Date]':</div><div class="line">                 // 对日期类型没有使用return或break, 因此会继续执行到下一步(无论数据类型是否为Boolean类型, 因为下一步将对Boolean类型进行检查)</div><div class="line">                 case '[object Boolean]':</div><div class="line">                     // 将日期或布尔类型转换为数字</div><div class="line">                     // 日期类型将转换为数值类型的时间戳(无效的日期格式将被换转为NaN)</div><div class="line">                     // 布尔类型中, true被转换为1, false被转换为0</div><div class="line">                     // 比较两个日期或布尔类型被转换为数字后是否相等</div><div class="line">                     return +a == +b;</div><div class="line">                 case '[object RegExp]':</div><div class="line">                     // 正则表达式类型, 通过source访问表达式的字符串形式</div><div class="line">                     // 检查两个表达式的字符串形式是否相等</div><div class="line">                     // 检查两个表达式的全局属性是否相同(包括g, i, m)</div><div class="line">                     // 如果完全相等, 则认为两个数据相等</div><div class="line">                     return a.source == b.source &amp;&amp; a.global == b.global &amp;&amp; a.multiline == b.multiline &amp;&amp; a.ignoreCase == b.ignoreCase;</div><div class="line">             &#125;</div><div class="line">             // 当执行到此时, ab两个数据应该为类型相同的对象或数组类型</div><div class="line">             if( typeof a != 'object' || typeof b != 'object')</div><div class="line">                 return false;</div><div class="line">             // stack(堆)是在isEqual调用eq函数时内部传递的空数组, 在后面比较对象和数据的内部迭代中调用eq方法也会传递</div><div class="line">             // length记录堆的长度</div><div class="line">             var length = stack.length;</div><div class="line">             while(length--) &#123;</div><div class="line">                 // 如果堆中的某个对象与数据a匹配, 则认为相等</div><div class="line">                 if(stack[length] == a)</div><div class="line">                     return true;</div><div class="line">             &#125;</div><div class="line">             // 将数据a添加到堆中</div><div class="line">             stack.push(a);</div><div class="line">             // 定义一些局部变量</div><div class="line">             var size = 0, result = true;</div><div class="line">             // 通过递归深层比较对象和数组</div><div class="line">             if(className == '[object Array]') &#123;</div><div class="line">                 // 被比较的数据为数组类型</div><div class="line">                 // size记录数组的长度</div><div class="line">                 // result比较两个数组的长度是否一致, 如果长度不一致, 则方法的最后将返回result(即false)</div><div class="line">                 size = a.length;</div><div class="line">                 result = size == b.length;</div><div class="line">                 // 如果两个数组的长度一致</div><div class="line">                 if(result) &#123;</div><div class="line">                     // 调用eq方法对数组中的元素进行迭代比较(如果数组中包含二维数组或对象, eq方法会进行深层比较)</div><div class="line">                     while(size--) &#123;</div><div class="line">                         // 在确保两个数组都存在当前索引的元素时, 调用eq方法深层比较(将堆数据传递给eq方法)</div><div class="line">                         // 将比较的结果存储到result变量, 如果result为false(即在比较中得到某个元素的数据不一致), 则停止迭代</div><div class="line">                         if(!( result = size in a == size in b &amp;&amp; eq(a[size], b[size], stack)))</div><div class="line">                             break;</div><div class="line">                     &#125;</div><div class="line">                 &#125;</div><div class="line">             &#125; else &#123;</div><div class="line">                 // 被比较的数据为对象类型</div><div class="line">                 // 如果两个对象不是同一个类的实例(通过constructor属性比较), 则认为两个对象不相等</div><div class="line">                 if('constructor' in a != 'constructor' in b || a.constructor != b.constructor)</div><div class="line">                     return false;</div><div class="line">                 // 深层比较两个对象中的数据</div><div class="line">                 for(var key in a) &#123;</div><div class="line">                     if(_.has(a, key)) &#123;</div><div class="line">                         // size用于记录比较过的属性数量, 因为这里遍历的是a对象的属性, 并比较b对象中该属性的数据</div><div class="line">                         // 当b对象中的属性数量多余a对象时, 此处的逻辑成立, 但两个对象并不相等</div><div class="line">                         size++;</div><div class="line">                         // 迭代调用eq方法, 深层比较两个对象中的属性值</div><div class="line">                         // 将比较的结果记录到result变量, 当比较到不相等的数据时停止迭代</div><div class="line">                         if(!( result = _.has(b, key) &amp;&amp; eq(a[key], b[key], stack)))</div><div class="line">                             break;</div><div class="line">                     &#125;</div><div class="line">                 &#125;</div><div class="line">                 // 深层比较完毕, 这里已经可以确保在对象a中的所有数据, 对象b中也存在相同的数据</div><div class="line">                 // 根据size(对象属性长度)检查对象b中的属性数量是否与对象a相等</div><div class="line">                 if(result) &#123;</div><div class="line">                     // 遍历对象b中的所有属性</div><div class="line">                     for(key in b) &#123;</div><div class="line">                         // 当size已经到0时(即对象a中的属性数量已经遍历完毕), 而对象b中还存在有属性, 则对象b中的属性多于对象a</div><div class="line">                         if(_.has(b, key) &amp;&amp; !(size--))</div><div class="line">                             break;</div><div class="line">                     &#125;</div><div class="line">                     // 当对象b中的属性多于对象a, 则认为两个对象不相等</div><div class="line">                     result = !size;</div><div class="line">                 &#125;</div><div class="line">             &#125;</div><div class="line">             // 函数执行完毕时, 从堆中移除第一个数据(在比较对象或数组时, 会迭代eq方法, 堆中可能存在多个数据)</div><div class="line">             stack.pop();</div><div class="line">             // 返回的result记录了最终的比较结果</div><div class="line">             return result;</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         // 对两个数据的值进行比较(支持复合数据类型), 内部函数eq的外部方法</div><div class="line">         _.isEqual = function(a, b) &#123;</div><div class="line">             return eq(a, b, []);</div><div class="line">         &#125;;</div><div class="line">         // 检查数据是否为空值, 包含'', false, 0, null, undefined, NaN, 空数组(数组长度为0)和空对象(对象本身没有任何属性)</div><div class="line">         _.isEmpty = function(obj) &#123;</div><div class="line">             // obj被转换为Boolean类型后值为false</div><div class="line">             if(obj == null)</div><div class="line">                 return true;</div><div class="line">             // 检查对象或字符串长度是否为0</div><div class="line">             if(_.isArray(obj) || _.isString(obj))</div><div class="line">                 return obj.length === 0;</div><div class="line">             // 检查对象(使用for in循环时将首先循环对象本身的属性, 其次是原型链中的属性), 因此如果第一个属性是属于对象本身的, 那么该对象不是一个空对象</div><div class="line">             for(var key in obj)</div><div class="line">             if(_.has(obj, key))</div><div class="line">                 return false;</div><div class="line">             // 所有数据类型均没有通过验证, 是一个空数据</div><div class="line">             return true;</div><div class="line">         &#125;;</div><div class="line">         // 验证对象是否是一个DOM对象</div><div class="line">         _.isElement = function(obj) &#123;</div><div class="line">             return !!(obj &amp;&amp; obj.nodeType == 1);</div><div class="line">         &#125;;</div><div class="line">         // 验证对象是否是一个数组类型, 优先调用宿主环境提供的isArray方法</div><div class="line">         _.isArray = nativeIsArray ||</div><div class="line">         function(obj) &#123;</div><div class="line">             return toString.call(obj) == '[object Array]';</div><div class="line">         &#125;;</div><div class="line"></div><div class="line">         // 验证对象是否是一个复合数据类型的对象(即非基本数据类型String, Boolean, Number, null, undefined)</div><div class="line">         // 如果基本数据类型通过new进行创建, 则也属于对象类型</div><div class="line">         _.isObject = function(obj) &#123;</div><div class="line">             return obj === Object(obj);</div><div class="line">         &#125;;</div><div class="line">         // 检查一个数据是否是一个arguments参数对象</div><div class="line">         _.isArguments = function(obj) &#123;</div><div class="line">             return toString.call(obj) == '[object Arguments]';</div><div class="line">         &#125;;</div><div class="line">         // 验证isArguments函数, 如果运行环境无法正常验证arguments类型的数据, 则重新定义isArguments方法</div><div class="line">         if(!_.isArguments(arguments)) &#123;</div><div class="line">             // 对于环境无法通过toString验证arguments类型的, 则通过调用arguments独有的callee方法来进行验证</div><div class="line">             _.isArguments = function(obj) &#123;</div><div class="line">                 // callee是arguments的一个属性, 指向对arguments所属函数自身的引用</div><div class="line">                 return !!(obj &amp;&amp; _.has(obj, 'callee'));</div><div class="line">             &#125;;</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         // 验证对象是否是一个函数类型</div><div class="line">         _.isFunction = function(obj) &#123;</div><div class="line">             return toString.call(obj) == '[object Function]';</div><div class="line">         &#125;;</div><div class="line">         // 验证对象是否是一个字符串类型</div><div class="line">         _.isString = function(obj) &#123;</div><div class="line">             return toString.call(obj) == '[object String]';</div><div class="line">         &#125;;</div><div class="line">         // 验证对象是否是一个数字类型</div><div class="line">         _.isNumber = function(obj) &#123;</div><div class="line">             return toString.call(obj) == '[object Number]';</div><div class="line">         &#125;;</div><div class="line">         // 检查一个数字是否为有效数字且有效范围(Number类型, 值在负无穷大 - 正无穷大之间)</div><div class="line">         _.isFinite = function(obj) &#123;</div><div class="line">             return _.isNumber(obj) &amp;&amp; isFinite(obj);</div><div class="line">         &#125;;</div><div class="line">         // 检查数据是否为NaN类型(所有数据中只有NaN与NaN不相等)</div><div class="line">         _.isNaN = function(obj) &#123;</div><div class="line">             return obj !== obj;</div><div class="line">         &#125;;</div><div class="line">         // 检查数据是否时Boolean类型</div><div class="line">         _.isBoolean = function(obj) &#123;</div><div class="line">             // 支持字面量和对象形式的Boolean数据</div><div class="line">             return obj === true || obj === false || toString.call(obj) == '[object Boolean]';</div><div class="line">         &#125;;</div><div class="line">         // 检查数据是否是一个Date类型</div><div class="line">         _.isDate = function(obj) &#123;</div><div class="line">             return toString.call(obj) == '[object Date]';</div><div class="line">         &#125;;</div><div class="line">         // 检查数据是否是一个正则表达式类型</div><div class="line">         _.isRegExp = function(obj) &#123;</div><div class="line">             return toString.call(obj) == '[object RegExp]';</div><div class="line">         &#125;;</div><div class="line">         // 检查数据是否是Null值</div><div class="line">         _.isNull = function(obj) &#123;</div><div class="line">             return obj === null;</div><div class="line">         &#125;;</div><div class="line">         // 检查数据是否是Undefined(未定义的)值</div><div class="line">         _.isUndefined = function(obj) &#123;</div><div class="line">             return obj ===</div><div class="line">             void 0;</div><div class="line">         &#125;;</div><div class="line">         // 检查一个属性是否属于对象本身, 而非原型链中</div><div class="line">         _.has = function(obj, key) &#123;</div><div class="line">             return hasOwnProperty.call(obj, key);</div><div class="line">         &#125;;</div><div class="line">         // 工具函数</div><div class="line">         // -----------------</div><div class="line"></div><div class="line">         // 放弃_(下划线)命名的Underscore对象, 并返回Underscore对象, 一般用于避免命名冲突或规范命名方式</div><div class="line">         // 例如:</div><div class="line">         // var us = _.noConflict(); // 取消_(下划线)命名, 并将Underscore对象存放于us变量中</div><div class="line">         // console.log(_); // _(下划线)已经无法再访问Underscore对象, 而恢复为Underscore定义前的值</div><div class="line">         _.noConflict = function() &#123;</div><div class="line">             // previousUnderscore变量记录了Underscore定义前_(下划线)的值</div><div class="line">             root._ = previousUnderscore;</div><div class="line">             return this;</div><div class="line">         &#125;;</div><div class="line">         // 返回与参数相同的值, 一般用于将一个数据的获取方式转换为函数获取方式(内部用于构建方法时作为默认处理器函数)</div><div class="line">         _.identity = function(value) &#123;</div><div class="line">             return value;</div><div class="line">         &#125;;</div><div class="line">         // 使指定的函数迭代执行n次(无参数)</div><div class="line">         _.times = function(n, iterator, context) &#123;</div><div class="line">             for(var i = 0; i &lt; n; i++)</div><div class="line">             iterator.call(context, i);</div><div class="line">         &#125;;</div><div class="line">         // 将HTML字符串中的特殊字符转换为HTML实体, 包含 &amp; &lt; &gt; " ' \</div><div class="line">         _.escape = function(string) &#123;</div><div class="line">             return ('' + string).replace(/&amp;/g, '&amp;').replace(/&lt;/g, '&lt;').replace(/&gt;/g, '&gt;').replace(/"/g, '"').replace(/'/g, ''').replace(/\//g, '/');</div><div class="line">         &#125;;</div><div class="line">         // 指定一个对象的属性, 返回该属性对应的值, 如果该属性对应的是一个函数, 则会执行该函数并返回结果</div><div class="line">         _.result = function(object, property) &#123;</div><div class="line">             if(object == null)</div><div class="line">                 return null;</div><div class="line">             // 获取对象的值</div><div class="line">             var value = object[property];</div><div class="line">             // 如果值是一个函数, 则执行并返回, 否则将直接返回</div><div class="line">             return _.isFunction(value) ? value.call(object) : value;</div><div class="line">         &#125;;</div><div class="line">         // 添加一系列自定义方法到Underscore对象中, 用于扩展Underscore插件</div><div class="line">         _.mixin = function(obj) &#123;</div><div class="line">             // obj是一个集合一系列自定义方法的对象, 此处通过each遍历对象的方法</div><div class="line">             each(_.functions(obj), function(name) &#123;</div><div class="line">                 // 通过addToWrapper函数将自定义方法添加到Underscore构建的对象中, 用于支持对象式调用</div><div class="line">                 // 同时将方法添加到 _ 本身, 用于支持函数式调用</div><div class="line">                 addToWrapper(name, _[name] = obj[name]);</div><div class="line">             &#125;);</div><div class="line">         &#125;;</div><div class="line">         // 获取一个全局唯一标识, 标识从0开始累加</div><div class="line">         var idCounter = 0;</div><div class="line">         // prefix表示标识的前缀, 如果没有指定前缀则直接返回标识, 一般用于给对象或DOM创建唯一ID</div><div class="line">         _.uniqueId = function(prefix) &#123;</div><div class="line">             var id = idCounter++;</div><div class="line">             return prefix ? prefix + id : id;</div><div class="line">         &#125;;</div><div class="line">         // 定义模板的界定符号, 在template方法中使用</div><div class="line">         _.templateSettings = &#123;</div><div class="line">             // JavaScript可执行代码的界定符</div><div class="line">             evaluate : /&lt;%([\s\S]+?)%&gt;/g,</div><div class="line">             // 直接输出变量的界定符</div><div class="line">             interpolate : /&lt;%=([\s\S]+?)%&gt;/g,</div><div class="line">             // 需要将HTML输出为字符串(将特殊符号转换为字符串形式)的界定符</div><div class="line">             escape : /&lt;%-([\s\S]+?)%&gt;/g</div><div class="line">         &#125;;</div><div class="line"></div><div class="line">         var noMatch = /.^/;</div><div class="line"></div><div class="line">         // escapes对象记录了需要进行相互换转的特殊符号与字符串形式的对应关系, 在两者进行相互转换时作为索引使用</div><div class="line">         // 首先根据字符串形式定义特殊字符</div><div class="line">         var escapes = &#123;</div><div class="line">             '\\' : '\\',</div><div class="line">             "'" : "'",</div><div class="line">             'r' : '\r',</div><div class="line">             'n' : '\n',</div><div class="line">             't' : '\t',</div><div class="line">             'u2028' : '\u2028',</div><div class="line">             'u2029' : '\u2029'</div><div class="line">         &#125;;</div><div class="line">         // 遍历所有特殊字符字符串, 并以特殊字符作为key记录字符串形式</div><div class="line">         for(var p in escapes)</div><div class="line">         escapes[escapes[p]] = p;</div><div class="line">         // 定义模板中需要替换的特殊符号, 包含反斜杠, 单引号, 回车符, 换行符, 制表符, 行分隔符, 段落分隔符</div><div class="line">         // 在将字符串中的特殊符号转换为字符串形式时使用</div><div class="line">         var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;</div><div class="line">         // 在将字符串形式的特殊符号进行反转(替换)时使用</div><div class="line">         var unescaper = /\\(\\|'|r|n|t|u2028|u2029)/g;</div><div class="line"></div><div class="line">         // 反转字符串中的特殊符号</div><div class="line">         // 在模板中涉及到需要执行的JavaScript源码, 需要进行特殊符号反转, 否则如果以HTML实体或字符串形式出现, 会抛出语法错误</div><div class="line">         var unescape = function(code) &#123;</div><div class="line">             return code.replace(unescaper, function(match, escape) &#123;</div><div class="line">                 return escapes[escape];</div><div class="line">             &#125;);</div><div class="line">         &#125;;</div><div class="line">         // Underscore模板解析方法, 用于将数据填充到一个模板字符串中</div><div class="line">         // 模板解析流程:</div><div class="line">         // 1. 将模板中的特殊符号转换为字符串</div><div class="line">         // 2. 解析escape形式标签, 将内容解析为HTML实体</div><div class="line">         // 3. 解析interpolate形式标签, 输出变量</div><div class="line">         // 4. 解析evaluate形式标签, 创建可执行的JavaScript代码</div><div class="line">         // 5. 生成一个处理函数, 该函数在得到数据后可直接填充到模板并返回填充后的字符串</div><div class="line">         // 6. 根据参数返回填充后的字符串或处理函数的句柄</div><div class="line">         // -------------------</div><div class="line">         // 在模板体内, 可通过argments获取2个参数, 分别为填充数据(名称为obj)和Underscore对象(名称为_)</div><div class="line">         _.template = function(text, data, settings) &#123;</div><div class="line">             // 模板配置, 如果没有指定配置项, 则使用templateSettings中指定的配置项</div><div class="line">             settings = _.defaults(settings || &#123;&#125;, _.templateSettings);</div><div class="line"></div><div class="line">             // 开始将模板解析为可执行源码</div><div class="line">             var source = "__p+='" + text.replace(escaper, function(match) &#123;</div><div class="line">                 // 将特殊符号转移为字符串形式</div><div class="line">                 return '\\' + escapes[match];</div><div class="line">             &#125;).replace(settings.escape || noMatch, function(match, code) &#123;</div><div class="line">                 // 解析escape形式标签 &lt;%- %&gt;, 将变量中包含的HTML通过_.escape函数转换为HTML实体</div><div class="line">                 return "'+\n_.escape(" + unescape(code) + ")+\n'";</div><div class="line">             &#125;).replace(settings.interpolate || noMatch, function(match, code) &#123;</div><div class="line">                 // 解析interpolate形式标签 &lt;%= %&gt;, 将模板内容作为一个变量与其它字符串连接起来, 则会作为一个变量输出</div><div class="line">                 return "'+\n(" + unescape(code) + ")+\n'";</div><div class="line">             &#125;).replace(settings.evaluate || noMatch, function(match, code) &#123;</div><div class="line">                 // 解析evaluate形式标签 &lt;% %&gt;, evaluate标签中存储了需要执行的JavaScript代码, 这里结束当前的字符串拼接, 并在新的一行作为JavaScript语法执行, 并将后面的内容再次作为字符串的开始, 因此evaluate标签内的JavaScript代码就能被正常执行</div><div class="line">                 return "';\n" + unescape(code) + "\n;__p+='";</div><div class="line">             &#125;) + "';\n";</div><div class="line">             if(!settings.variable)</div><div class="line">                 source = 'with(obj||&#123;&#125;)&#123;\n' + source + '&#125;\n';</div><div class="line">             source = "var __p='';" + "var print=function()&#123;__p+=Array.prototype.join.call(arguments, '')&#125;;\n" + source + "return __p;\n";</div><div class="line"></div><div class="line">             // 创建一个函数, 将源码作为函数执行体, 将obj和Underscore作为参数传递给该函数</div><div class="line">             var render = new Function(settings.variable || 'obj', '_', source);</div><div class="line">             // 如果指定了模板的填充数据, 则替换模板内容, 并返回替换后的结果</div><div class="line">             if(data)</div><div class="line">                 return render(data, _);</div><div class="line">             // 如果没有指定填充数据, 则返回一个函数, 该函数用于将接收到的数据替换到模板</div><div class="line">             // 如果在程序中会多次填充相同模板, 那么在第一次调用时建议不指定填充数据, 在获得处理函数的引用后, 再直接调用会提高运行效率</div><div class="line">             var template = function(data) &#123;</div><div class="line">                 return render.call(this, data, _);</div><div class="line">             &#125;;</div><div class="line">             // 将创建的源码字符串添加到函数对象中, 一般用于调试和测试</div><div class="line">             template.source = 'function(' + (settings.variable || 'obj') + ')&#123;\n' + source + '&#125;';</div><div class="line">             // 没有指定填充数据的情况下, 返回处理函数句柄</div><div class="line">             return template;</div><div class="line">         &#125;;</div><div class="line">         // 支持Underscore对象的方法链操作, 可参考 wrapper.prototype.chain</div><div class="line">         _.chain = function(obj) &#123;</div><div class="line">             return _(obj).chain();</div><div class="line">         &#125;;</div><div class="line">         // Underscore对象封装相关方法</div><div class="line">         // ---------------</div><div class="line"></div><div class="line">         // 创建一个包装器, 将一些原始数据进行包装</div><div class="line">         // 所有的undersocre对象, 内部均通过wrapper函数进行构造和封装</div><div class="line">         // Underscore与wrapper的内部关系:</div><div class="line">         // -内部定义变量_, 将Underscore相关的方法添加到_, 这样就可以支持函数式的调用, 如_.bind()</div><div class="line">         // -内部定义wrapper类, 将_的原型对象指向wrapper类的原型</div><div class="line">         // -将Underscore相关的方法添加到wrapper原型, 创建的_对象就具备了Underscore的方法</div><div class="line">         // -将Array.prototype相关方法添加到wrapper原型, 创建的_对象就具备了Array.prototype中的方法</div><div class="line">         // -new _()时实际创建并返回了一个wrapper()对象, 并将原始数组存储到_wrapped变量, 并将原始值作为第一个参数调用对应方法</div><div class="line">         var wrapper = function(obj) &#123;</div><div class="line">             // 原始数据存放在包装对象的_wrapped属性中</div><div class="line">             this._wrapped = obj;</div><div class="line">         &#125;;</div><div class="line">         // 将Underscore的原型对象指向wrapper的原型, 因此通过像wrapper原型中添加方法, Underscore对象也会具备同样的方法</div><div class="line">         _.prototype = wrapper.prototype;</div><div class="line"></div><div class="line">         // 返回一个对象, 如果当前Underscore调用了chain()方法(即_chain属性为true), 则返回一个被包装的Underscore对象, 否则返回对象本身</div><div class="line">         // result函数用于在构造方法链时返回Underscore的包装对象</div><div class="line">         var result = function(obj, chain) &#123;</div><div class="line">             return chain ? _(obj).chain() : obj;</div><div class="line">         &#125;;</div><div class="line">         // 将一个自定义方法添加到Underscore对象中(实际是添加到wrapper的原型中, 而Underscore对象的原型指向了wrapper的原型)</div><div class="line">         var addToWrapper = function(name, func) &#123;</div><div class="line">             // 向wrapper原型中添加一个name函数, 该函数调用func函数, 并支持了方法链的处理</div><div class="line">             wrapper.prototype[name] = function() &#123;</div><div class="line">                 // 获取func函数的参数, 并将当前的原始数据添加到第一个参数</div><div class="line">                 var args = slice.call(arguments);</div><div class="line">                 unshift.call(args, this._wrapped);</div><div class="line">                 // 执行函数并返回结果, 并通过result函数对方法链进行封装, 如果当前调用了chain()方法, 则返回封装后的Underscore对象, 否则返回对象本身</div><div class="line">                 return result(func.apply(_, args), this._chain);</div><div class="line">             &#125;;</div><div class="line">         &#125;;</div><div class="line">         // 将内部定义的_(下划线, 即Underscore方法集合对象)中的方法复制到wrapper的原型链中(即Underscore的原型链中)</div><div class="line">         // 这是为了在构造对象式调用的Underscore对象时, 这些对象也会具有内部定义的Underscore方法</div><div class="line">         _.mixin(_);</div><div class="line"></div><div class="line">         // 将Array.prototype中的相关方法添加到Underscore对象中, 因此在封装后的Underscore对象中也可以直接调用Array.prototype中的方法</div><div class="line">         // 如: _([]).push()</div><div class="line">         each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) &#123;</div><div class="line">             // 获取Array.prototype中对应方法的引用</div><div class="line">             var method = ArrayProto[name];</div><div class="line">             // 将该方法添加到Underscore对象中(实际是添加到wrapper的原型对象, 因此在创建Underscore对象时同时具备了该方法)</div><div class="line">             wrapper.prototype[name] = function() &#123;</div><div class="line">                 // _wrapped变量中存储Underscore对象的原始值</div><div class="line">                 var wrapped = this._wrapped;</div><div class="line">                 // 调用Array对应的方法并返回结果</div><div class="line">                 method.apply(wrapped, arguments);</div><div class="line">                 var length = wrapped.length;</div><div class="line">                 if((name == 'shift' || name == 'splice') &amp;&amp; length === 0)</div><div class="line">                     delete wrapped[0];</div><div class="line">                 // 即使是对于Array中的方法, Underscore同样支持方法链操作</div><div class="line">                 return result(wrapped, this._chain);</div><div class="line">             &#125;;</div><div class="line">         &#125;);</div><div class="line">         // 作用同于上一段代码, 将数组中的一些方法添加到Underscore对象, 并支持了方法链操作</div><div class="line">         // 区别在于上一段代码所添加的函数, 均返回Array对象本身(也可能是封装后的Array), concat, join, slice方法将返回一个新的Array对象(也可能是封装后的Array)</div><div class="line">         each(['concat', 'join', 'slice'], function(name) &#123;</div><div class="line">             var method = ArrayProto[name];</div><div class="line">             wrapper.prototype[name] = function() &#123;</div><div class="line">                 return result(method.apply(this._wrapped, arguments), this._chain);</div><div class="line">             &#125;;</div><div class="line">         &#125;);</div><div class="line">         // 对Underscore对象进行链式操作的声明方法</div><div class="line">         wrapper.prototype.chain = function() &#123;</div><div class="line">             // this._chain用来标示当前对象是否使用链式操作</div><div class="line">             // 对于支持方法链操作的数据, 一般在具体方法中会返回一个Underscore对象, 并将原始值存放在_wrapped属性中, 也可以通过value()方法获取原始值</div><div class="line">             this._chain = true;</div><div class="line">             return this;</div><div class="line">         &#125;;</div><div class="line">         // 返回被封装的Underscore对象的原始值(存放在_wrapped属性中)</div><div class="line">         wrapper.prototype.value = function() &#123;</div><div class="line">             return this._wrapped;</div><div class="line">         &#125;;</div><div class="line">     &#125;).call(this);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;源码版本：Underscore.js 1.8.3&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="//kenve.github.io/categories/Web/"/>
    
    
      <category term="javascript" scheme="//kenve.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>感想</title>
    <link href="//kenve.github.io/2016/06/10/graduation-feeling/"/>
    <id>//kenve.github.io/2016/06/10/graduation-feeling/</id>
    <published>2016-06-09T19:37:21.000Z</published>
    <updated>2017-04-26T17:03:46.805Z</updated>
    
    <content type="html"><![CDATA[<p>2016-05-29</p>
<p>无论什么事情，你想快点让它到来的，亦或你不想它到来的，都会一步一步逼近，然后成为过去。其实生活就是这样吧，时间不会给你任何理由让你犹豫，该来还是要来，该面对的还是要面对。<br><a id="more"></a><br>毕业也是一段时期的结束，另一段时期的开始，就如车到站了上面的乘客必须下车了，而原来车上同行的乘客又会选择上下一辆车，在新的车上又会遇到乘客。</p>
<p>其实谁对谁都不重要，只是在当时气氛的原因。</p>
<p>工作，</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2016-05-29&lt;/p&gt;
&lt;p&gt;无论什么事情，你想快点让它到来的，亦或你不想它到来的，都会一步一步逼近，然后成为过去。其实生活就是这样吧，时间不会给你任何理由让你犹豫，该来还是要来，该面对的还是要面对。&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="//kenve.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>StartUp</title>
    <link href="//kenve.github.io/2016/05/23/startup/"/>
    <id>//kenve.github.io/2016/05/23/startup/</id>
    <published>2016-05-23T14:01:24.000Z</published>
    <updated>2016-05-23T14:01:24.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="随笔" scheme="//kenve.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>React学习笔记</title>
    <link href="//kenve.github.io/2016/03/19/react-note/"/>
    <id>//kenve.github.io/2016/03/19/react-note/</id>
    <published>2016-03-18T16:00:00.000Z</published>
    <updated>2017-04-26T17:03:10.148Z</updated>
    
    <content type="html"><![CDATA[<p>我的github中的 <code>react-demo</code> 仓库地址<a href="https://github.com/kenve/react-demo" target="_blank" rel="external">react-demo</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我的github中的 &lt;code&gt;react-demo&lt;/code&gt; 仓库地址&lt;a href=&quot;https://github.com/kenve/react-demo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;react-demo&lt;/a&gt;。&lt;/p&gt;

    
    </summary>
    
      <category term="Web" scheme="//kenve.github.io/categories/Web/"/>
    
    
      <category term="react" scheme="//kenve.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Git 学习笔记</title>
    <link href="//kenve.github.io/2014/05/18/leangit/"/>
    <id>//kenve.github.io/2014/05/18/leangit/</id>
    <published>2014-05-17T19:37:21.000Z</published>
    <updated>2017-04-26T08:19:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name <span class="string">"Your Name"</span></div><div class="line">$ git config --global user.email <span class="string">"email@example.com"</span></div></pre></td></tr></table></figure>
<p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。<br>自定义Git</p>
<a id="more"></a>
<p>让Git显示颜色，会让命令输出看起来更醒目：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global color.ui <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>更多配置查看<a href="https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-%E9%85%8D%E7%BD%AE-Git" target="_blank" rel="external">Pro Git 自定义Git配置</a></p>
<h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><p>什么是版本库呢？版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。<br>  首先创建一个空文件夹，如果你使用Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。<br>  第二步，通过<code>git init</code>命令把这个目录变成Git可以管理的仓库：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git init</div></pre></td></tr></table></figure></p>
<p>不要使用Windows自带的记事本编辑任何文本文件,因为编码问题。</p>
<p>小结：</p>
<ul>
<li>初始化一个Git仓库，使用git init命令。</li>
<li>添加文件到Git仓库，分两步：</li>
<li>第一步，使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件；</li>
<li>第二步，使用命令<code>git commit</code>，完成。</li>
</ul>
<h2 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h2><ul>
<li>要随时掌握工作区的状态，使用<code>git status</code>命令。</li>
<li>如果 <code>git status</code> 告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</li>
</ul>
<h2 id="查看log"><a href="#查看log" class="headerlink" title="查看log"></a>查看log</h2><p><code>git log</code>命令显示从最近到最远的提交日志<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">log</span></div></pre></td></tr></table></figure></p>
<p>简化一行显示使用参数<code>--pretty-oneline</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">log</span> --pretty-oneline</div></pre></td></tr></table></figure></p>
<h2 id="恢复指定版本"><a href="#恢复指定版本" class="headerlink" title="恢复指定版本"></a>恢复指定版本</h2><p>首先，Git必须知道当前版本是哪个版本，在Git中，用 <code>HEAD</code> 表示当前版本，也就是最新的提交<code>3628164...882e1e0</code>（注意我的提交ID和你的肯定不一样），上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个^比较容易数不过来，所以写成<code>HEAD~100</code>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset --hard HEAD^</div></pre></td></tr></table></figure></p>
<p>返回后面的版本,版本号没必要写全，前几位就可以了，<code>405e7f6</code>Git会自动去找。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard 405e7f6</div></pre></td></tr></table></figure></p>
<p>在Git中，总是有后悔药可以吃的。当你用<code>$ git reset --hard HEAD^</code>回退到以前时，再想恢复到当前版本时，就必须找到当前的commit id。Git提供了一个命令<code>git reflog</code>用来记录你的每一次命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reflog</div></pre></td></tr></table></figure></p>
<p>提交后，用<code>git diff HEAD -- test.md</code>命令可以查看工作区和版本库里面最新版本的区别：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git diff HEAD -- test.md</div></pre></td></tr></table></figure></p>
<p>小结：</p>
<ul>
<li>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。</li>
<li>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</li>
<li>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</li>
</ul>
<h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><p>Git会告诉你，<code>git checkout -- file</code>可以丢弃工作区的修改：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -- test.md</div></pre></td></tr></table></figure></p>
<p>就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。<br>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</p>
<p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。</p>
<p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p>
<h2 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h2><p>每次修改，如果不<code>add</code>到暂存区，那就不会加入到<code>commit</code>中</p>
<h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用<code>rm</code>命令删了：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rm test.txt</div></pre></td></tr></table></figure></p>
<p>这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，<code>git status</code>命令会立刻告诉你哪些文件被删除了：</p>
<p>现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code>。</p>
<p>另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -- test.txt</div></pre></td></tr></table></figure></p>
<p>命令<code>git rm</code>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。</p>
<h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p>在github新建仓库后，<br>新建仓库内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"# learngit"</span> &gt;&gt; README.md</div><div class="line">git init</div><div class="line">git add README.md</div><div class="line">git commit -m <span class="string">"first commit"</span></div><div class="line">git remote add origin https://github.com/kenve/learngit.git</div><div class="line">git push -u origin master</div></pre></td></tr></table></figure></p>
<p>本地仓库的内容推送到GitHub仓库:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git remote add origin https://github.com/kenve/learngit.git</div><div class="line">git push -u origin master</div></pre></td></tr></table></figure></p>
<p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>
<p>要关联一个远程库，使用命令<code>git remote add origin https://github.com/kenve/learngit.git</code></p>
<p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p>
<p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改。</p>
<h4 id="克隆项目"><a href="#克隆项目" class="headerlink" title="克隆项目"></a>克隆项目</h4><p>假设远程库已经准备好了，下一步是用命令<code>git clone</code>克隆一个本地库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> git@github.com:kenve/gitskills.git</div><div class="line"><span class="comment"># $ git clone https://github.com/reactjs/redux.git</span></div></pre></td></tr></table></figure></p>
<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h4 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h4><p>创建dev分支，然后切换到dev分支：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b dev</div></pre></td></tr></table></figure></p>
<p><code>git checkout</code>命令加上<code>-b</code>参数表示创建并切换，相当于以下两条命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git branch dev</div><div class="line">$ git checkout dev</div></pre></td></tr></table></figure></p>
<p>然后，用<code>git branch</code>命令查看当前分支：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch</div></pre></td></tr></table></figure></p>
<p><code>git branch</code>命令会列出所有分支，当前分支前面会标一个 <code>*</code> 号。<br>切换分支用<code>$ git checkout name</code> 命令。</p>
<p><code>git merge</code>命令用于合并指定分支到当前分支,把 <code>dev</code> 分支的工作成果合并到 <code>master</code> 分支上：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git merge dev</div></pre></td></tr></table></figure></p>
<p>因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在<code>master</code>分支上工作效果是一样的，但过程更安全。</p>
<ul>
<li>小结<br>Git鼓励大量使用分支：</li>
</ul>
<p>查看分支：<code>git branch</code></p>
<p>创建分支：<code>git branch &lt;name&gt;</code></p>
<p>切换分支：<code>git checkout &lt;name&gt;</code></p>
<p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code></p>
<p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p>
<p>删除分支：<code>git branch -d &lt;name&gt;</code></p>
<h4 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h4><p>Git用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> 标记出不同分支的内容。</p>
<p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</p>
<p>用<code>git log --graph</code>命令可以看到分支合并图。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</div></pre></td></tr></table></figure></p>
<h4 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h4><p>通常，合并分支时，如果可能，Git会用<code>Fast forward</code>模式，但这种模式下，删除分支后，会丢掉分支信息。</p>
<p>如果要强制禁用<code>Fast forward</code>模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。<br>合并分支时，请注意<code>--no-ff</code>参数，表示禁用<code>Fast forward</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git merge --no-ff -m <span class="string">"merge with no-ff"</span> dev</div></pre></td></tr></table></figure></p>
<p>因为本次合并要创建一个新的commit，所以加上<code>-m</code>参数，把commit描述写进去。</p>
<p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p>
<p>首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p>
<p>那在哪干活呢？干活都在dev分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本；</p>
<p>你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了。</p>
<p>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并。</p>
<h4 id="BUG分支"><a href="#BUG分支" class="headerlink" title="BUG分支"></a>BUG分支</h4><p>创建一个分支issue-101来修复BUG，修复好后合并分支，但是，当前正在<code>dev</code>上进行的工作还没有提交(没有完成无法提交)：<br>幸好，Git还提供了一个<code>stash</code>功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git stash</div></pre></td></tr></table></figure></p>
<p>现在，用<code>git status</code>查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。</p>
<p>首先确定要在哪个分支上修复bug，假定需要在<code>master</code>分支上修复，就从<code>maste</code>r创建临时分支：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git checkout master</div><div class="line">$ git checkout -b issue-101</div></pre></td></tr></table></figure></p>
<p>修复完成后，切换到<code>master</code>分支，并完成合并，最后删除<code>issue-101</code>分支.<br>用<code>git stash list</code>命令查看隐藏的分支工作现场。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git stash list</div></pre></td></tr></table></figure></p>
<p>工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：</p>
<p>一是用<code>git stash apply</code>恢复，但是恢复后，stash内容并不删除，你需要用<code>git stash drop</code>来删除；</p>
<p>另一种方式是用<code>git stash po</code>p，恢复的同时把stash内容也删了：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git stash pop</div></pre></td></tr></table></figure></p>
<p>你可以多次stash，恢复的时候，先用<code>git stash list</code>查看，然后恢复指定的stash，用命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git stash apply stash@&#123;0&#125;</div></pre></td></tr></table></figure></p>
<h4 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h4><p>添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。</p>
<p>但不需要这个新功能时，要将其销毁，当使用<code>$ git branch -d &lt;name&gt;</code> 进行销毁时，会提醒销毁失败。Git友情提醒，<code>feature</code>分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用命令<code>git branch -D &lt;name&gt;</code>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch -D feature-vulcan</div></pre></td></tr></table></figure></p>
<h4 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h4><p>当你从远程仓库克隆时，实际上Git自动把本地的<code>master</code>分支和远程的<code>master</code>分支对应起来了，并且，远程仓库的默认名称是<code>origin</code>。</p>
<p>要查看远程库的信息，用<code>git remote</code>,或者，用git remote -v显示更详细的信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git remote -v</div><div class="line">origin  git@github.com:kenve/learngit.git (fetch)</div><div class="line">origin  git@github.com:kenve/learngit.git (push)</div></pre></td></tr></table></figure>
<p><strong>推送分支：</strong><br>上面显示了可以抓取和推送的<code>origin</code>的地址。如果没有推送权限，就看不到push的地址。<br>推送分支：<code>git push origin &lt;name&gt;</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin dev</div></pre></td></tr></table></figure></p>
<p>但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？</p>
<ul>
<li><code>master</code>分支是主分支，因此要时刻与远程同步；</li>
<li><code>dev</code>分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</li>
<li>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</li>
<li>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</li>
</ul>
<p>总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！</p>
<p><strong>更新分支：</strong><br><code>git fetch</code> 命令与一个远程的仓库交互，并且将远程仓库中有但是在当前仓库的没有的所有信息拉取下来然后存储在你本地数据库中。<br>从远程端获取最新版到本地:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git fetch origin master</div></pre></td></tr></table></figure></p>
<p>比较本地仓库与远程参考区别：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> -p master.. origin/master</div></pre></td></tr></table></figure>
<p>把远程端下载下来的代码合并到本地仓库，远程和本地合并：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git merge origin/master</div></pre></td></tr></table></figure></p>
<p>方式二：可以下载 <code>master</code> 为新分支 <code>temp</code> 然后在合并分支,然后删除 <code>temp</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 1</span></div><div class="line">$ git fetch origin master:temp</div><div class="line"><span class="comment"># 2</span></div><div class="line">$ git diff temp</div><div class="line"><span class="comment"># 3</span></div><div class="line">$ git merge temp </div><div class="line"><span class="comment"># 4</span></div><div class="line">$ git branch <span class="_">-d</span> temp</div></pre></td></tr></table></figure></p>
<p><strong>抓取分支</strong><br><code>git pull</code> 命令基本上就是 <code>git fetch</code> 和 <code>git merge</code> 命令的组合体，Git 从你指定的远程仓库中抓取内容，然后马上尝试将其合并进你所在的分支中。<br>多人协作时，大家都会往<code>master</code>和<code>dev</code>分支上推送各自的修改。<br>当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的<code>master</code>分支。<br>现在，你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b dev origin/dev</div></pre></td></tr></table></figure></p>
<p>他就可以在<code>dev</code>上继续修改，然后，时不时地把<code>dev</code>分支push到远程。而碰巧你也对同样的文件作了修改，并试图推送：<code>$ git push origin dev</code>。推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，先用<code>git pull</code>把最新的提交从<code>origin/dev</code>抓下来，然后，在本地合并，解决冲突，再推送：</p>
<p><code>git pull</code>也失败了，原因是没有指定本地<code>dev</code>分支与远程<code>origin/dev</code>分支的链接，根据提示，设置<code>dev</code>和 <code>origin/dev</code> 的链接：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch --set-upstream dev origin/dev</div></pre></td></tr></table></figure></p>
<p>这回<code>git pull</code>成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push。<br>多人协作的工作模式通常是这样：</p>
<ol>
<li>首先，可以试图用<code>git push origin branch-name</code>推送自己的修改；</li>
<li>如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；</li>
<li>如果合并有冲突，则解决冲突，并在本地提交；</li>
<li>没有冲突或者解决掉冲突后，再用 <code>git push origin branch-name</code> 推送就能成功！</li>
<li>从远程端获取最新版到本地 <code>$ git fetch origin branch-name</code><br>如果<code>git pull</code>提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream branch-name origin/branch-name</code>。</li>
</ol>
<p><strong>小结</strong></p>
<ul>
<li>查看远程库信息，使用<code>git remote -v</code>；</li>
<li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li>
<li>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</li>
<li>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code> ，本地和远程分支的名称最好一致；</li>
<li>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</li>
<li>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。 </li>
</ul>
<h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><p>发布一个版本时，我们通常先在版本库中打一个标签，这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。<br>Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动），所以，创建和删除标签都是瞬间完成的。</p>
<h4 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h4><p>在Git中打标签非常简单，首先，切换到需要打标签的分支上<code>$ git checkout master</code>,然后，敲命令<code>git tag &lt;name&gt;</code>就可以打一个新标签：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag v1.0</div></pre></td></tr></table></figure></p>
<p>可以用命令<code>git tag</code>查看所有标签。<br>默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？<br>方法是找到历史提交的<code>commit id</code>,使用<code>$ git tag &lt;tag-name&gt; &lt;commit-id&gt;</code>，然后打上就可以了：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> --pretty=oneline --abbrev-commit</div><div class="line"></div><div class="line">$ git tag v0.9 6224937</div></pre></td></tr></table></figure></p>
<p>注意，标签不是按时间顺序列出，而是按字母排序的。可以用<code>git show &lt;tagname&gt;</code>查看标签信息：<br>还可以创建带有说明的标签，用<code>-a</code>指定标签名，<code>-m</code>指定说明文字：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag <span class="_">-a</span> v0.1 -m <span class="string">"version 0.1 released"</span> 3628164</div></pre></td></tr></table></figure></p>
<p>还可以通过<code>-s</code>用私钥签名一个标签:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag <span class="_">-s</span> v0.2 -m <span class="string">"signed version 0.2 released"</span> fec145a</div></pre></td></tr></table></figure></p>
<p>签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，或者没有gpg密钥对，就会报错：<br>如果报错，请参考GnuPG帮助文档配置Key,<a href="https://github.com/settings/keys" target="_blank" rel="external">GitHub GPG key配置</a>。</p>
<p>小结:</p>
<ul>
<li>命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；</name></li>
<li>git tag -a <tagname> -m “blablabla…”可以指定标签信息；</tagname></li>
<li>git tag -s <tagname> -m “blablabla…”可以用PGP签名标签；</tagname></li>
<li>命令git tag可以查看所有标签。</li>
</ul>
<h4 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h4><p>如果标签打错了，也可以使用<code>$ git tag -d &lt;name&gt;</code>删除：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag <span class="_">-d</span> v0.1</div></pre></td></tr></table></figure></p>
<p>因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。<br>如果要推送某个标签到远程，使用命令<code>git push origin &lt;tagname&gt;</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin v1.0</div></pre></td></tr></table></figure></p>
<p>或者，一次性推送全部尚未推送到远程的本地标签：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin --tags</div></pre></td></tr></table></figure></p>
<p>如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag <span class="_">-d</span> v0.9</div></pre></td></tr></table></figure></p>
<p>然后，从远程删除。删除命令也是push，但是格式如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin :refs/tags/v0.9</div></pre></td></tr></table></figure></p>
<p>小结：</p>
<ul>
<li>命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；</li>
<li>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</li>
<li>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；</li>
<li>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。</li>
</ul>
<h2 id="自定义Git"><a href="#自定义Git" class="headerlink" title="自定义Git"></a>自定义Git</h2><h4 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h4><p>忽略某些文件时，需要编写<code>.gitignore</code>,查看<a href="https://github.com/github/gitignore" target="_blank" rel="external">Github所有配置文件</a>；<br><code>.gitignore</code>文件本身要放到版本库里，并且可以对<code>.gitignore</code>做版本管理！<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Windows:</span></div><div class="line">Thumbs.db</div><div class="line">ehthumbs.db</div><div class="line">Desktop.ini</div><div class="line"></div><div class="line"><span class="comment"># Python:</span></div><div class="line">*.py[cod]</div><div class="line">*.so</div><div class="line">*.egg</div><div class="line">dist</div><div class="line">build</div></pre></td></tr></table></figure></p>
<p>忽略文件的原则是：</p>
<ul>
<li>忽略操作系统自动生成的文件，比如缩略图等；</li>
<li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；</li>
<li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。</li>
</ul>
<h4 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h4><p>如果敲git st就表示git status那就简单多了。<br>我们只需要敲一行命令，告诉Git，以后<code>st</code>就表示<code>status</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global alias.st status</div></pre></td></tr></table></figure></p>
<p>当然还有别的命令可以简写，很多人都用<code>co</code>表示<code>checkout</code>，<code>ci</code>表示<code>commit</code>，<code>br</code>表示<code>branch</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git config --global alias.co checkout</div><div class="line">$ git config --global alias.ci commit</div><div class="line">$ git config --global alias.br branch</div></pre></td></tr></table></figure></p>
<p>以后提交就可以简写成：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git ci -m <span class="string">"bala bala bala..."</span></div></pre></td></tr></table></figure></p>
<p><code>--global</code>参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。<br>我们知道，命令<code>git reset HEAD file</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个<code>unstage</code>别名：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global alias.unstage <span class="string">'reset HEAD'</span></div></pre></td></tr></table></figure></p>
<p>配置一个git last，让其显示最后一次提交信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global alias.last <span class="string">'log -1'</span></div></pre></td></tr></table></figure></p>
<p>甚至还有人丧心病狂地把lg配置成了：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global alias.lg <span class="string">"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"</span></div></pre></td></tr></table></figure></p>
<p><strong>配置文件</strong><br>配置Git的时候，加上<code>--global</code>是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。</p>
<p>配置文件放哪了？每个仓库的Git配置文件都放在<code>.git/config</code>文件中。<br>别名就在<code>[alias]</code>后面，要删除别名，直接把对应的行删掉即可。<br>而当前用户的Git配置文件放在用户主目录下的一个隐藏文件<code>.gitconfig</code>中：<br>配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。</p>
<h2 id="搭建Git服务器"><a href="#搭建Git服务器" class="headerlink" title="搭建Git服务器"></a>搭建Git服务器</h2><p>GitHub就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给GitHub交保护费，那就只能自己搭建一台Git服务器作为私有仓库使用。</p>
<p>搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，这样，通过几条简单的<code>apt</code>命令就可以完成安装。</p>
<p>假设你已经有<code>sudo</code>权限的用户账号，下面，正式开始安装。</p>
<p>第一步，安装git：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install git</div></pre></td></tr></table></figure></p>
<p>第二步，创建一个<code>git</code>用户，用来运行<code>git</code>服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo adduser git</div></pre></td></tr></table></figure></p>
<p>第三步，创建证书登录：<br>收集所有需要登录的用户的公钥，就是他们自己的<code>id_rsa.pub</code>文件，把所有公钥导入到<code>/home/git/.ssh/authorized_keys</code>文件里，一行一个。</p>
<p>第四步，初始化Git仓库：<br>先选定一个目录作为Git仓库，假定是<code>/srv/sample.git</code>，在<code>/srv</code>目录下输入命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo git init --bare sample.git</div></pre></td></tr></table></figure></p>
<p>Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以<code>.git</code>结尾。然后，把owner改为<code>git</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo chown -R git:git sample.git</div></pre></td></tr></table></figure></p>
<p>第五步，禁用shell登录：<br>出于安全考虑，第二步创建的<code>git</code>用户不允许登录shell，这可以通过编辑<code>/etc/passwd</code>文件完成。找到类似下面的一行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git:x:1001:1001:,,,:/home/git:/bin/bash</div></pre></td></tr></table></figure></p>
<p>改为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</div></pre></td></tr></table></figure></p>
<p>这样，<code>git</code>用户可以正常通过ssh使用git，但无法登录shell，因为我们为<code>git</code>用户指定的<code>git-shell</code>每次一登录就自动退出。</p>
<p>第六步，克隆远程仓库：<br>现在，可以通过<code>git clone</code>命令克隆远程仓库了，在各自的电脑上运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> git@server:/srv/sample.git</div></pre></td></tr></table></figure></p>
<h4 id="管理公钥"><a href="#管理公钥" class="headerlink" title="管理公钥"></a>管理公钥</h4><p>如果团队很小，把每个人的公钥收集起来放到服务器的<code>/home/git/.ssh/authorized_keys</code>文件里就是可行的,如果团队有几百号人，就没法这么玩了，这时，可以用<a href="https://github.com/res0nat0r/gitosis" target="_blank" rel="external">Gitosis</a>来管理公钥。</p>
<h4 id="管理权限"><a href="#管理权限" class="headerlink" title="管理权限"></a>管理权限</h4><p>要方便管理公钥，用<a href="https://github.com/res0nat0r/gitosis" target="_blank" rel="external">Gitosis</a>；<br>要像SVN那样变态地控制权限，用<a href="https://github.com/sitaramc/gitolite" target="_blank" rel="external">Gitolite</a>。</p>
<h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><ul>
<li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">Pro Git 2nd Edition (2014) 中文版</a></li>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰老师Git教程</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ git config --global user.name &lt;span class=&quot;string&quot;&gt;&quot;Your Name&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git config --global user.email &lt;span class=&quot;string&quot;&gt;&quot;email@example.com&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。&lt;br&gt;自定义Git&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="//kenve.github.io/tags/git/"/>
    
  </entry>
  
</feed>
